##
## SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>
## SPDX-License-Identifier: LicenseRef-Splunk-8-2021
##
##
############################
###         Logs         ###
############################

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_cloudtrail*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:cloudtrail:log
priority = 1

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_cloudwatch*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:cloudwatch:log
priority = 1

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_cloudwatch_logs*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:cloudwatchlogs:log
priority = 2

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_config*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:config:log
priority = 1

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_configuration_tool*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:configtool:log
priority = 2

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_description*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:description:log
priority = 1

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_metadata*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:metadata:log
priority = 1

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_s3*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:s3:log
priority = 1

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_inspector*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:inspector:log
priority = 1

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_kinesis*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:kinesis:log
priority = 1

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_config_rule*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:configrule:log
priority = 2

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*splunk_ta_aws_logs*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:logs:log
priority = 1

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_sqs_based_s3*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:sqsbaseds3:log
priority = 2

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_billing*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:billing:log
priority = 1

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_sns*.log*]
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:sns:alert:log
priority = 1

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_sqs*.log*]
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:sqs:log
priority = 1

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*Splunk_TA_aws*rest*.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:resthandler:log
priority = 1

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*Splunk_TA_aws*util.log*]
SHOULD_LINEMERGE = false
LINE_BREAKER=([\r\n]+)\d{4}-\d{2}-\d{2}
sourcetype = aws:util:log
priority = 1

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)Splunk_TA_aws-RestEndpoints*.log*]
sourcetype = aws:restendpoints:log
priority = 10

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_proxy_conf*.log*]
sourcetype = aws:proxy-conf:log
priority = 10

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_s3util*.log*]
sourcetype = aws:s3util:log
priority = 10

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)regex_dimensions*.log*]
sourcetype = aws:regex-dimensions:log
priority = 10

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*Splunk_TA_aws_ta_util*.log*]
sourcetype=aws:ta-util:log
priority = 100

[source::...(/|\\)var(/|\\)log(/|\\)splunk(/|\\)*aws_*.log*]
EXTRACT-traceback_and_error = (Traceback \(most recent call last\)):(?P<Traceback>[\S|\s]*\S(\r\n|\n|\r)(?P<ErrorCode>[^:]*):(?P<ErrorDetail>.*)$)

##################################
###         CloudTrail         ###
##################################

## Apply the following properties to sample text files by extension
[source::....aws_cloudtrail]
sourcetype = aws:cloudtrail

# Set sourcetype to aws:cloudtrail when ingesting data
[aws:cloudtrail]
SHOULD_LINEMERGE = false
TRUNCATE = 8388608
TIME_PREFIX = \"eventTime\"\s*\:\s*\"
TIME_FORMAT = %Y-%m-%dT%H:%M:%S%Z
MAX_TIMESTAMP_LOOKAHEAD = 28
KV_MODE = json

## Extraction ##
################
# non-CIM
# AWS ARN Scheme
# arn:partition:service:region:account-id:resource
# arn:partition:service:region:account-id:resourcetype/resource
# arn:partition:service:region:account-id:resourcetype:resource
REPORT-user-for-aws-cloudtrail-acctmgmt = user-for-aws-cloudtrail-acctmgmt

## Aliases ##
#############
# non-CIM
FIELDALIAS-requestParameters-for-aws-cloudtrail = requestParameters AS desc
FIELDALIAS-eventTime-for-aws-cloudtrail = eventTime AS start_time
FIELDALIAS-responseElements.credentials.accessKeyId-for-aws-cloudtrail = responseElements.credentials.accessKeyId AS temp_access_key
FIELDALIAS-userIdentity.accessKeyId-for-aws-cloudtrail = userIdentity.accessKeyId AS user_access_key

# Common CIM
FIELDALIAS-eventType-for-aws-cloudtrail-app = eventType AS app
FIELDALIAS-eventSource-for-aws-cloudtrail-dvc = eventSource AS dvc
FIELDALIAS-awsRegion-for-aws-cloudtrail_region = awsRegion AS region
FIELDALIAS-eventName-for-aws-cloudtrail_signature = eventName AS signature
FIELDALIAS-sourceIPAddress-for-aws-cloudtrail-src = sourceIPAddress AS src
FIELDALIAS-sourceIPAddress-for-aws-cloudtrail-src_ip = sourceIPAddress AS src_ip
FIELDALIAS-accountId_user_group_id = userIdentity.accountId AS user_group_id
FIELDALIAS-awsRegion-for-aws-cloudtrail_vendor_region = awsRegion AS vendor_region

# Authentication CIM
FIELDALIAS-errorMessage-for-aws-cloudtrail-reason = errorMessage AS reason

# Change CIM
FIELDALIAS-eventName-for-aws-cloudtrail-command = eventName AS command
FIELDALIAS-requestParameters.instancesSet.items{}.imageId-for-aws-cloudtrail-image_id = requestParameters.instancesSet.items{}.imageId as image_id
FIELDALIAS-requestParameters.instanceType-for-aws-cloudtrail-instance_type = requestParameters.instanceType as instance_type
FIELDALIAS-errorMessage-for-aws-cloudtrail-result = errorMessage AS result
FIELDALIAS-errorCode-for-aws-cloudtrail-result_id = errorCode AS result_id

# Change CIM - Network dataset
EVAL-rule_action = coalesce('responseElements.networkAcl.entrySet.items{}.ruleAction','requestParameters.ruleAction')


##########
# non-CIM
EVAL-msg = coalesce('errorCode',"success")
EVAL-user_arn = coalesce('userIdentity.arn', 'requestParameters.roleArn')
EVAL-userName = coalesce('userIdentity.userName', 'requestParameters.sourceIdentity','userIdentity.sessionContext.sessionIssuer.userName', if(isnull('userIdentity.arn'), mvindex(split(mvindex(split('requestParameters.roleArn',":"), -1), "/"), -1), mvindex(split(mvindex(split('userIdentity.arn',":"), -1), "/"), -1)))

# Common CIM
EVAL-vendor_account = coalesce('userIdentity.accountId', 'recipientAccountId')
EVAL-user = case(eventName="PutBucketAcl",'userIdentity.userName',\
                 eventName IN("CreateLoadBalancerListeners","CreateLoadBalancerPolicy","CreateLogGroup","CreateLogStream","GetBucketEncryption"),'userIdentity.sessionContext.sessionIssuer.userName',\
                 eventName="CreateLoginProfile",'responseElements.loginProfile.userName',\
                 eventName="CreateUser",'responseElements.user.userName',\
                 (eventName="DeleteUser" OR  eventName="DeleteLoginProfile"),'requestParameters.userName',\
                 eventName="UpdateUser",'requestParameters.newUserName',\
                 eventName="CreateAccessKey",coalesce('responseElements.accessKey.userName',replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1")),\
                 (eventName="ListSigningCertificates" OR eventName="ListAccessKeys" OR eventName="GetUser" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases" OR eventName="ListSigningCertificates"),replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"),\
                 eventName="CreateVirtualMFADevice",'userIdentity.userName',\
                 eventName="CreateNetworkInterface" OR eventName="DeleteNetworkInterface",'userIdentity.sessionContext.sessionIssuer.userName',\
                 eventName="AssumeRole" AND 'userIdentity.type'="AssumedRole",mvindex(split('requestParameters.roleArn', "/"), -1),\
                 eventName="AssumeRole" OR eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity",mvindex(split('responseElements.assumedRoleUser.arn',"/"), -1),\
                 eventName="ConsoleLogin" AND 'userIdentity.type'="AssumedRole" AND isnotnull('additionalEventData.LoginTo'), coalesce(mvindex(split('userIdentity.principalId', ":"), 1), 'userIdentity.userName'),\
                 eventType="AwsConsoleSignIn" OR eventName IN("ListAliases","ListRoles"),coalesce('userIdentity.userName','userIdentity.sessionContext.sessionIssuer.userName'),\
                 like(eventName, "%Instances") OR like(eventName, "%Volume") OR like(eventName,"Put%") OR like(eventName,"%Bucket"),coalesce('userIdentity.userName','userIdentity.sessionContext.sessionIssuer.userName'),\
                 true(),'userIdentity.userName')
EVAL-user_name = case(eventName="ListRoles",mvindex(split('userIdentity.principalId', ":"), 0),\
                     eventName="CreateLoginProfile", 'responseElements.loginProfile.userName',\
                     eventName="CreateUser",'responseElements.user.userName',\
                     (eventName="DeleteUser" OR  eventName="DeleteLoginProfile"),'requestParameters.userName',\
                     eventName="UpdateUser",'requestParameters.newUserName',\
                     eventName="CreateAccessKey",coalesce('responseElements.accessKey.userName',replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1")),\
                     (eventName="ListSigningCertificates" OR eventName="ListAccessKeys" OR eventName="GetUser" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases" OR eventName="ListSigningCertificates"),replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"),\
                     eventName="CreateVirtualMFADevice",'userIdentity.userName',\
                     true(),coalesce('userIdentity.userName','userIdentity.sessionContext.sessionIssuer.userName',if(isnull('userIdentity.arn'),mvindex(split(mvindex(split('requestParameters.roleArn',":"), -1), "/"), -1), mvindex(split(mvindex(split('userIdentity.arn',":"), -1), "/"), -1))))
EVAL-user_id =  case((eventName="ConsoleLogin" AND 'userIdentity.type'="IAMUser") OR eventName="CheckMfa",coalesce(mvindex(split('userIdentity.principalId', ":"), 0), 'userIdentity.accountId'),\
                ((eventName="ConsoleLogin" OR eventName="ListAliases" OR eventName="ListRoles" OR eventName="DeleteNetworkInterface") AND 'userIdentity.type'="AssumedRole"), coalesce(mvindex(split('userIdentity.sessionContext.sessionIssuer.principalId', ":"), 0), mvindex(split('userIdentity.principalId', ":"), 0)),\
                eventName="CreateUser", 'responseElements.user.userId',\
                eventName="DeleteUser" OR eventName="UpdateUser", 'requestParameters.userName',\
                eventType="AwsApiCall",mvindex(split('responseElements.assumedRoleUser.assumedRoleId', ":"), 0),\
                true(), 'userIdentity.userName')
EVAL-user_type = case((eventName="CreateLoginProfile" OR like(eventName, "%User") OR eventName="ListSigningCertificates" OR eventName="CreateAccessKey" OR eventName="ListAccessKeys" OR eventName="CreateVirtualMFADevice" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases"), null(),\
                      (eventName="ConsoleLogin" AND 'userIdentity.type'="AssumedRole" AND isnull('additionalEventData.LoginTo')), 'userIdentity.sessionContext.sessionIssuer.type',\
                      eventType="AwsConsoleSignIn" , 'userIdentity.type',\
                      like(eventName, "%Instances") OR like(eventName, "%Volume") OR like(eventName,"Put%") OR like(eventName,"%Bucket"), 'userIdentity.type',\
                      eventName IN("ListAliases", "ListRoles", "DeleteNetworkInterface"),'userIdentity.sessionContext.sessionIssuer.type',\
                      like(eventName, "AssumeRole%"),mvjoin(coalesce('resources{}.type',mvindex(split('responseElements.assumedRoleUser.arn', "/"), 1)), ","),\
                      true(),'userIdentity.type')
EVAL-user_agent=coalesce(userAgent,'userAgent{}')

# Authentication CIM
EVAL-aws_account_id = if('userIdentity.type'="AWSAccount" OR 'userIdentity.type'="AWSService", recipientAccountId, 'userIdentity.accountId')
EVAL-vendor_product = "AWS CloudTrail" 

# Change CIM
# Supporting ES A&I, object_id mapping is replicated in the dest field. Default to dest=eventSource
EVAL-dest = case(eventName="PutBucketAcl",'requestParameters.Host',\
                 eventName="GetBucketEncryption",'requestParameters.host{}',\
                 eventName="RunInstances", coalesce('responseElements.instancesSet.items{}.instanceId', 'eventSource'),\
                 eventName="StartInstances", coalesce('requestParameters.instancesSet.items{}.instanceId', 'eventSource'),\
                 eventName="StopInstances" OR eventName="TerminateInstances" OR eventName="RebootInstances",'requestParameters.instancesSet.items{}.instanceId',\
                 like(eventName, "%Volume"),coalesce('requestParameters.instanceId', 'eventSource'),\
                 like(eventName, "%Bucket"),'requestParameters.host{}',\
                 like(eventName, "Put%"),coalesce('requestParameters.host{}', 'requestParameters.Host'),\
                 eventName="CreateUser" OR eventName="UpdateUser" OR eventName="DeleteUser",'eventSource',\
                 eventName="DeleteLoginProfile",'requestParameters.userName',\
                 eventName="ConsoleLogin" OR eventName="AssumeRole" OR eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity" OR eventName="CheckMfa" OR eventName="ListAliases",coalesce('additionalEventData.LoginTo', 'eventSource'),\
                 eventName="DeleteSecurityGroup", 'eventSource',\
                 true(), eventSource)



# object field mappings differ for various Change event types, and must be specified uniquely.
EVAL-object = case(like(eventName, "%Instances"),if((eventName="RunInstances"),coalesce('responseElements.instancesSet.items{}.instanceId', 'eventSource'),coalesce('requestParameters.instancesSet.items{}.instanceId', 'eventSource')),\
                   like(eventName, "%SecurityGroup%"),coalesce('responseElements.groupId', 'requestParameters.groupId'),\
                   like(eventName, "%Volume"),if((eventName="CreateVolume"),'responseElements.volumeId', 'requestParameters.volumeId'),\
                   like(eventName, "%NetworkAcl%"),coalesce('requestParameters.networkAclId', 'responseElements.networkAcl.networkAclId'),\
                   (like(eventName, "%Bucket%") OR eventName="PutObject"), 'requestParameters.bucketName',\
                   eventName="CreateUser",'responseElements.user.userName',\
                   eventName="DeleteUser" OR eventName="DeleteLoginProfile",'requestParameters.userName',\
                   eventName="UpdateUser",'requestParameters.newUserName',\
                   eventName="CreateLoginProfile",'responseElements.loginProfile.userName',\
                   eventName="CreateAccessKey", coalesce('responseElements.accessKey.userName',replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1")),\
                   eventName="CreateVirtualMFADevice",mvindex(split('responseElements.virtualMFADevice.serialNumber', "/"), 1),\
                   eventName="ListAccessKeys" OR eventName="GetUser" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases",replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"),\
                   eventName="CreateChangeSet",'requestParameters.stackName',\
                   eventName="CreateDeliveryStream",'requestParameters.deliveryStreamName',\
                   eventName="CreateKeyspace",'requestParameters.keyspaceName',\
                   eventName="CreateLoadBalancerListeners",'requestParameters.loadBalancerName',\
                   eventName="CreateLoadBalancerPolicy",'requestParameters.loadBalancerName',\
                   eventName="CreateQueue",'requestParameters.queueName',\
                   eventName="CreateTable",'requestParameters.tableName',\
                   eventName="CreateFunction20150331",'requestParameters.functionName',\
                   eventName="CreateLogGroup",'requestParameters.logGroupName',\
                   eventName="CreateLogStream",'requestParameters.logStreamName',\
                   eventName="CreateNetworkInterface",'responseElements.networkInterface.networkInterfaceId',\
                   eventName="DeleteNetworkInterface",'requestParameters.networkInterfaceId',\
                   eventName="ListSigningCertificates",replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"))
                   
                   
# object_id field mappings differ for various Change event types, and must be specified uniquely.
EVAL-object_id = case(eventName="RunInstances",'responseElements.instancesSet.items{}.instanceId',\
                      like(eventName, "%Instances"),coalesce('requestParameters.instancesSet.items{}.instanceId','eventSource'),\
                      like(eventName, "%SecurityGroup%"),coalesce('responseElements.groupId', 'requestParameters.groupId'),\
                      like(eventName, "%Volume"), if((eventName="CreateVolume"), 'responseElements.volumeId', 'requestParameters.volumeId'),\
                      like(eventName, "%NetworkAcl%"), coalesce('requestParameters.networkAclId', 'responseElements.networkAcl.networkAclId'),\
                      (like(eventName, "%Bucket%") OR eventName="PutObject"),'requestParameters.bucketName',\
                      eventName="CreateUser", 'responseElements.user.userId',\
                      eventName="DeleteUser" OR eventName="DeleteLoginProfile", 'requestParameters.userName',\
                      eventName="CreateLoginProfile", 'responseElements.loginProfile.userName',\
                      eventName="UpdateUser", 'requestParameters.newUserName',\
                      eventName="CreateAccessKey", coalesce('responseElements.accessKey.accessKeyId',replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1")),\
                      eventName="CreateVirtualMFADevice", mvindex(split('responseElements.virtualMFADevice.serialNumber', "/"), 1),\
                      eventName="ListAccessKeys" OR eventName="GetUser" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases", replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"),\
                      eventName="CreateChangeSet",'requestParameters.stackName',\
                      eventName="CreateDeliveryStream",'requestParameters.deliveryStreamName',\
                      eventName="CreateKeyspace",'requestParameters.keyspaceName',\
                      eventName="CreateLoadBalancerListeners",'requestParameters.loadBalancerName',\
                      eventName="CreateLoadBalancerPolicy",'requestParameters.loadBalancerName',\
                      eventName="CreateQueue",'requestParameters.queueName',\
                      eventName="CreateTable",'requestParameters.tableName',\
                      eventName="CreateFunction20150331",'requestParameters.functionName',\
                      eventName="CreateLogGroup",'requestParameters.logGroupName',\
                      eventName="CreateLogStream",'requestParameters.logStreamName',\
                      eventName="CreateNetworkInterface",'responseElements.networkInterface.networkInterfaceId',\
                      eventName="DeleteNetworkInterface",'requestParameters.networkInterfaceId',\
                      eventName="ListSigningCertificates",replace(errorMessage, ".*resource\s*:\s*(?:user\s*)?(.*)","\1"))



# Change CIM - Network dataset
EVAL-dest_ip_range = case(like(eventName, "%SecurityGroupEgress"), 'requestParameters.ipPermissions.items{}.ipRanges.items{}.cidrIp',\
                         (like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="true"),  'requestParameters.cidrBlock')
EVAL-dest_port_range = case(like(eventName, "%SecurityGroupEgress%"), mvappend('requestParameters.ipPermissions.items{}.toPort','requestParameters.ipPermissions.items{}.fromPort'),\
                            (like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="true"), mvappend('requestParameters.portRange.from','requestParameters.portRange.to'))

EVAL-direction = case(((like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="false") OR like(eventName, "%SecurityGroupIngress")), "Inbound",\
                      ((like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="true") OR like(eventName, "%SecurityGroupEgress")), "Outbound")

EVAL-object_attrs =  case(eventName="CreateKeyspace",replace('requestParameters.rawQuery', ".*(REPLICATION).*class.*:\s*['\"](.*)['\"].*", "\1=\2"),\
                        eventName IN ("CreateUser","DeleteUser","ListSigningCertificates","ListAccessKeys","GetUser","GetAccountSummary", "ListAccountAliases","ListRoles"),"user",\
                        eventName="CreateLoginProfile","passwordResetRequired=". 'responseElements.loginProfile.passwordResetRequired',\
                        eventName="UpdateUser", "userName=". 'requestParameters.userName',\
                        (eventName="CreateAccessKey" AND 'errorCode'="AccessDenied"), "user",\
                        eventName="CreateAccessKey","status=". 'responseElements.accessKey.status',\
                        eventName="CreateVirtualMFADevice", "virtualMFADevice",\
                        eventName="CreateNetworkAcl", if('responseElements.networkAcl.isDefault'== "false", "non-default", "default"),\
                        eventName="CreateNetworkAclEntry", "ruleAction=".'requestParameters.ruleAction',\
                        eventName="DeleteNetworkAclEntry", "ruleNumber=".'requestParameters.ruleNumber',\
                        eventName="ReplaceNetworkAclAssociation", "associationId=".'responseElements.newAssociationId',\
                        like(eventName, "RevokeSecurityGroup%") OR like(eventName, "AuthorizeSecurityGroup%"),"ipPermissions",\
                        eventName="DetachVolume","device=".'responseElements.device',\
                        eventName="AttachVolume","device=".'requestParameters.device'.", deleteOnTermination=".'requestParameters.deleteOnTermination',\
                        eventName="CreateVolume", "volumeType=".'responseElements.volumeType',\
                        eventName IN ("StartInstances", "StopInstances", "TerminateInstances", "RebootInstances"), "EC2",\
                        like(eventName, "%Volume"), "volume",\
                        eventName IN ("DeleteBucket", "CreateBucket"), "bucket",\
                        eventName="RunInstances" AND responseElements="", "subnetId=".'requestParameters.subnetId'.", iamInstanceProfile=".'requestParameters.iamInstanceProfile.name',\
                        eventName="RunInstances", "macAddress=".mvjoin('responseElements.instancesSet.items{}.networkInterfaceSet.items{}.macAddress',", macAddress=").", "."privateIpAddress=".mvjoin('responseElements.instancesSet.items{}.networkInterfaceSet.items{}.privateIpAddress',", privateIpAddress="),\
                        eventName="PutBucketPublicAccessBlock", "RestrictPublicBuckets=".'requestParameters.PublicAccessBlockConfiguration.RestrictPublicBuckets'.", BlockPublicPolicy=".'requestParameters.PublicAccessBlockConfiguration.BlockPublicPolicy'.", BlockPublicAcls=".'requestParameters.PublicAccessBlockConfiguration.BlockPublicAcls'.", IgnorePublicAcls=".'requestParameters.PublicAccessBlockConfiguration.IgnorePublicAcls',\
                        eventName="PutBucketAcl","AccessControlList",\
                        eventName="CreateChangeSet","changeSetName=".'requestParameters.changeSetName',\
                        eventName="CreateDeliveryStream","SplunkDestinationConfiguration",\
                        eventName="CreateLoadBalancerListeners","listeners",\
                        eventName="CreateQueue","message_queue",\
                        eventName="CreateTable","keyspaceName=".'requestParameters.keyspaceName',\
                        eventName="CreateLoadBalancerPolicy","policyName=".'requestParameters.policyName',\
                        eventName="CreateFunction20150331","lambda-console:blueprint".",".'requestParameters.tags.lambda-console:blueprint',\
                        eventName="CreateLogGroup","log_group",\
                        eventName="CreateLogStream","logGroupName=".'requestParameters.logGroupName',\
                        eventName="GetBucketEncryption","bucket",\
                        eventName="PutObject", "x-amz-storage-class=".'requestParameters.x-amz-storage-class',\
                        eventName="DeleteNetworkAcl", "ACL",\
                        eventName="ReplaceNetworkAclEntry","ruleNumber=".'requestParameters.ruleNumber'.", egress=".'requestParameters.egress'.", ruleAction=".'requestParameters.ruleAction',\
                        eventName="CreateSecurityGroup", "groupName=".'requestParameters.groupName',\
                        eventName="DeleteSecurityGroup", "security_group",\
                        eventName="ListAliases","alias",\
                        eventName="DeleteNetworkInterface", "network_interface",\
                        eventName="CreateNetworkInterface", "description=".'responseElements.networkInterface.description'.", macAddress=".'responseElements.networkInterface.macAddress'.", privateIpAddress=".'responseElements.networkInterface.privateIpAddress')


EVAL-protocol = if(like(eventName, "%SecurityGroup%"), 'requestParameters.ipPermissions.items{}.ipProtocol', null())

EVAL-protocol_code = if(like(eventName, "%NetworkAcl%"), 'requestParameters.aclProtocol', null())

EVAL-src_ip_range = case(like(eventName, "%SecurityGroupIngress"), 'requestParameters.ipPermissions.items{}.ipRanges.items{}.cidrIp',(like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="false"),  'requestParameters.cidrBlock')

EVAL-src_port_range = case(like(eventName, "%SecurityGroupIngress%"), mvappend('requestParameters.ipPermissions.items{}.toPort','requestParameters.ipPermissions.items{}.fromPort'),(like(eventName, "%NetworkAcl%") AND 'requestParameters.egress'="false"), mvappend('requestParameters.portRange.from','requestParameters.portRange.to'))

# If eventName!=ConsoleLogin then authentication_method will be left blank
# [aws_cloudtrail_multifactor_auth]
# TAGS multifactor, cloud
EVAL-authentication_method = case((('additionalEventData.MFAUsed'="Yes" AND eventName="ConsoleLogin") OR eventName="CheckMfa"), "MFA", ('additionalEventData.MFAUsed'="No" AND eventName="ConsoleLogin") OR ((eventName="AssumeRole" OR eventName="ListAliases") AND 'userIdentity.type'="AssumedRole" AND 'userIdentity.sessionContext.attributes.mfaAuthenticated'="false"), "SFA")

EVAL-errorCode = coalesce('errorCode', if(like('responseElements.ConsoleLogin', "Failure"), "failure", "success"), "success")

# eventtype for AssumeRole events - CIM fields src_user, src_user_id, src_user_type, and user_role. Only mapped for AssumeRole* events. They're blank for non-AssumeRole* events
# [eventtype::aws_cloudtrail_assumeRole_auth]
# TAGS assume_role
EVAL-src_user = case(eventName="PutBucketAcl",'userIdentity.userName',\
                    eventName IN("CreateLoadBalancerListeners", "GetBucketEncryption", "CreateLogStream", "CreateLogGroup", "CreateLoadBalancerPolicy"),'userIdentity.sessionContext.sessionIssuer.userName',\
                    eventName IN("CreateUser", "CreateLoginProfile", "DeleteNetworkInterface"), mvindex(split('userIdentity.principalId', ":"), 1),\
                    eventName="DeleteLoginProfile",'requestParameters.userName',\
                    eventName="CreateVirtualMFADevice",'userIdentity.userName',\
                    eventName="CreateNetworkInterface",'userIdentity.sessionContext.sessionIssuer.userName',\
                    like(eventName, "AssumeRole%"), coalesce('userIdentity.userName', 'requestParameters.sourceIdentity', 'userIdentity.sessionContext.sessionIssuer.userName'),\
                    (eventName="ConsoleLogin" AND  isnotnull('additionalEventData.LoginTo')), null(),\
                    eventName="ConsoleLogin" AND isnull('additionalEventData.LoginTo'), mvindex(split('userIdentity.principalId', ":"), 1),\
                    eventName IN("ListAliases","ListRoles"),mvindex(split('userIdentity.arn', "/"), -1),\
                    like(eventName, "%Instances") OR like(eventName, "%Volume") OR like(eventName,"Put%") OR like(eventName,"%Bucket"),coalesce('userIdentity.userName', 'userIdentity.sessionContext.sessionIssuer.userName'),\
                    true(),'userIdentity.userName')

EVAL-src_user_name = case((eventName="DeleteUser" OR eventName="UpdateUser" OR eventName="ListSigningCertificates" OR eventName="CreateAccessKey" OR eventName="ListAccessKeys" OR eventName="CreateVirtualMFADevice" OR eventName="GetUser" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases"), 'userIdentity.userName',\
                           eventName IN("ListAliases","ListRoles"),mvindex(split('userIdentity.arn', "/"), -1),\
                           eventName="CreateLoginProfile" OR eventName="CreateUser", mvindex(split('userIdentity.principalId', ":"), 1))

EVAL-src_user_id = case(eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity" OR eventName="ListAliases", if((mvcount(split('userIdentity.principalId', ":")) == 1)\
                        OR (mvcount(split('userIdentity.principalId', ":")) == 2), mvindex(split('userIdentity.principalId', ":"), 0),null()),\
                        eventName="AssumeRole" AND 'userIdentity.type'="IAMUser",mvindex(split('userIdentity.principalId', ":"), 0),\
                        eventName="AssumeRole" AND 'userIdentity.type'="AssumedRole",mvindex(split('userIdentity.sessionContext.sessionIssuer.principalId', ":"), 0),\
                        eventName="ConsoleLogin" AND 'userIdentity.type'="AssumedRole" AND isnull('additionalEventData.LoginTo'), mvindex(split('userIdentity.principalId', ":"), 0),\
                        like(eventName,"%User") AND 'userIdentity.type'!="AWSService",'userIdentity.principalId')

EVAL-src_user_role = if((eventName="AssumeRole" OR eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity") AND 'userIdentity.type'="AssumedRole", 'userIdentity.arn', null())

EVAL-src_user_type = case((eventName="AssumeRole" OR eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity" or eventName="ListAliases" OR eventName="ListRoles" OR eventName="CreateLoginProfile" OR like(eventName, "%User") OR eventName="ListSigningCertificates" OR eventName="CreateAccessKey" OR eventName="ListAccessKeys" OR eventName="CreateVirtualMFADevice" OR eventName="GetAccountSummary" OR eventName="ListAccountAliases" OR eventName="DeleteNetworkInterface") AND 'userIdentity.type'!="AWSService",'userIdentity.type',\
                     (eventType="AwsConsoleSignIn" AND 'userIdentity.type'="AssumedRole" AND isnull('additionalEventData.LoginTo')),'userIdentity.type') 

EVAL-user_role = if(eventName="AssumeRole" OR eventName="AssumeRoleWithSAML" OR eventName="AssumeRoleWithWebIdentity", case('userIdentity.type'="AssumedRole", 'requestParameters.roleArn', 'userIdentity.type'!="AWSService", 'responseElements.assumedRoleUser.arn', 'userIdentity.type'="AWSService", null()), null())



## Lookups ##
#############
# non-CIM
LOOKUP-vendor-product-for-aws-cloudtrail = vendor-product-for-aws-cloudtrail sourcetype OUTPUTNEW vendor, product
LOOKUP-changeType-for-aws-cloudtrail-lookup = eventName-change_type-for-aws-cloudtrail eventName OUTPUT change_type
LOOKUP-changetype-for-aws-cloudtrail = change_type-for-aws-cloudtrail eventSource OUTPUTNEW change_type

# Common CIM
LOOKUP-action-status-for-aws-cloudtrail = aws-cloudtrail-action-status-lookup eventName, errorCode OUTPUTNEW action, status

# Change CIM
LOOKUP-object_category-for-aws-cloudtrail = aws_cloudtrail_eventname_lookup eventName OUTPUTNEW object_category

# Change CIM - Network dataset
LOOKUP-protocol-for-aws-cloudtrail = vpcflow_protocol_code_lookup protocol_code OUTPUT protocol

##################################
###         CloudWatch         ###
##################################

[aws:cloudwatch]
# KV_MODE = multi_tsv_cloudwatch
KV_MODE = JSON
TIME_PREFIX = "timestamp":\s*"

# Extract
EVAL-Average = case(Average=="", 0, Average!="", Average)
EVAL-Maximum = case(Average=="", 0, Average!="", Maximum)
EVAL-Minimum = case(Average=="", 0, Average!="", Minimum)

# Extraction
EVAL-vendor_product = "AWS CloudWatch"
EVAL-dest = case(metric_name="FreeableMemory" OR metric_name="SwapUsage" OR metric_name="WriteLatency" OR metric_name="ReadLatency" OR metric_name="ReadIOPS" OR metric_name="WriteIOPS" OR metric_name="VolumeReadOps" OR metric_name="VolumeWriteOps" OR metric_name="DiskReadOps" OR metric_name="DiskWriteOps" OR metric_name="CPUUtilization" OR metric_name="NetworkPacketsIn" OR metric_name="DatabaseConnections", 'metric_dimensions')

# EC2 Metrics
EVAL-cpu_load_percent = case(metric_name="CPUUtilization", Average)
EVAL-read_ops = case(metric_name="DiskReadOps" OR metric_name="VolumeReadOps" OR metric_name="ReadIOPS", Sum)
EVAL-write_ops = case(metric_name="DiskWriteOps" OR metric_name="VolumeWriteOps" OR metric_name="WriteIOPS", Sum)
EVAL-bytes_in = case(metric_name="NetworkIn", Sum)
EVAL-bytes_out = case(metric_name="NetworkOut", Sum)
EXTRACT-vm_id = InstanceId=\[(?<vm_id>i-\S+)\]
EVAL-network_usage_in = case(metric_name="NetworkIn", Sum)
EVAL-network_usage_out = case(metric_name="NetworkOut", Sum)
EVAL-network_packets_in = case(metric_name="NetworkPacketsIn", Sum)
EVAL-network_packets_out = case(metric_name="NetworkPacketsOut", Sum)
EVAL-storage_ops_read = case(metric_name="DiskReadOps" OR metric_name="VolumeReadOps" OR metric_name="ReadIOPS", Sum)
EVAL-storage_ops_write = case(metric_name="DiskWriteOps" OR metric_name="VolumeWriteOps" OR metric_name="WriteIOPS", Sum)
EVAL-storage_usage_read = case(metric_name="DiskReadBytes", Sum)
EVAL-storage_usage_write = case(metric_name="DiskWriteBytes", Sum)


# Database Metrics
EVAL-bytes_sessions = case(metric_name="DatabaseConnections", Sum)
EVAL-bytes_sga_free_memory = case(metric_name="FreeableMemory", Sum)
EVAL-bytes_mem_free = case(metric_name="FreeableMemory", Sum)
EVAL-bytes_storage_free = case(metric_name="FreeStorageSpace", Sum)
EVAL-bytes_swap_used = case(metric_name="SwapUsage", Sum)
EVAL-bytes_read_latency = case(metric_name="ReadLatency", Sum)
EVAL-bytes_write_latency = case(metric_name="WriteLatency", Sum)
EVAL-mem_free = case(metric_name="FreeableMemory", Sum)

# ELB Metrics
EVAL-rtt = case(metric_name="Latency", Average)
EVAL-5xx_codes = case(metric_name="HTTPCode_ELB_5XX", Sum)

# Aliases
# Lookups
LOOKUP-vendor-product-for-aws-cloudwatch = vendor-product-for-aws-cloudtrail sourcetype OUTPUTNEW vendor,product,app

# unify account ID field
FIELDALIAS-aws-account-id = account_id as aws_account_id
REPORT-region = extract-region


[aws:cloudwatch:metric]
KV_MODE = none
DATETIME_CONFIG =
INDEXED_EXTRACTIONS = json
NO_BINARY_CHECK = true
TIMESTAMP_FIELDS = Timestamp
TRANSFORMS-metric_name_prefix = eval_aws_metric_name_prefix
METRIC-SCHEMA-TRANSFORMS = metric-schema:aws_cloudwatch_metric_schema


##################################
###           Billing          ###
##################################
[aws:billing]
SHOULD_LINEMERGE = false
MAX_TIMESTAMP_LOOKAHEAD = 1

# extraction
EVAL-report_month = strftime(_time, "%Y-%m")
EVAL-LinkedAccount = if(isnull(LinkedAccountName), if(isnull(LinkedAccountId), "Unspecified", LinkedAccountId), LinkedAccountName+" (" +LinkedAccountId + ")")
EVAL-ProductName = if(isnull(ProductName), if(isnull(ProductCode), "Unspecified", ProductCode), ProductName)
EVAL-AvailabilityZone = if(isnull(AvailabilityZone), "Unspecified", AvailabilityZone)

#compatible with old data
EVAL-S3KeyLastModified=if(isnull(S3KeyLastModified),strftime(strptime(mvindex(split(replace(source,"(\d{2}):(\d{2}):(\d{2})","\1 \2 \3"),":"),-1),"%a, %d %b %Y %H %M %S GMT"),"%Y-%m-%dT%H:%M:%S.000Z"),S3KeyLastModified)

# unify account ID field
FIELDALIAS-aws-account-id = PayerAccountId as aws_account_id

[aws:billing:cur]
SHOULD_LINEMERGE = false
TIME_PREFIX = lineItem/UsageStartDate=
TZ = GMT

# the sourcetype of the digest file is the sourcetype of billing cur + :digest
[aws:billing:cur:digest]
TRUNCATE = 8388608
TIME_PREFIX = lastModified"\s*:\s*"
TZ = GMT
KV_MODE = json

##################################
###         AWS Config         ###
##################################

# Notifications/Diff Payloads
[aws:config:notification]
SHOULD_LINEMERGE = false
TRUNCATE = 8388608
TIME_PREFIX = configurationItemCaptureTime"\s*:\s*"
TIME_FORMAT = %Y-%m-%dT%H:%M:%S.%3NZ
TZ = GMT
MAX_TIMESTAMP_LOOKAHEAD = 28
KV_MODE = json
ANNOTATE_PUNCT = false

FIELDALIAS-dest = configurationItem.resourceType AS dest
FIELDALIAS-object = configurationItem.resourceId AS object
FIELDALIAS-object_id = configurationItem.resourceId AS object_id
FIELDALIAS-object_attrs = configurationItem.resourceType AS object_attrs
FIELDALIAS-result = configurationItem.configurationItemStatus AS result
FIELDALIAS-user = configurationItem.configuration.masterUsername AS user

# unify account ID field
FIELDALIAS-aws-account-id = configurationItem.awsAccountId as aws_account_id
FIELDALIAS-region-for-aws-config = configurationItem.awsRegion AS region

EVAL-change_type = "configuration"
EVAL-dvc = "AWS Config"
EVAL-object_path = case(('configurationItem.ARN'="null") OR isnull('configurationItem.ARN'),'configurationItem.resourceId',true(),'configurationItem.ARN')
EVAL-status = "success"
EVAL-vendor_product = "AWS Config"

LOOKUP-action = aws_config_action_lookup status AS configurationItem.configurationItemStatus OUTPUT action
LOOKUP-object_category = aws_config_object_category_lookup type AS configurationItem.resourceType OUTPUT object_category

# Configuration History/Snapshots Payloads
[aws:config]
SHOULD_LINEMERGE = false
TRUNCATE = 8388608
TIME_PREFIX = configurationItemCaptureTime"\s*:\s*"
TIME_FORMAT = %Y-%m-%dT%H:%M:%S.%3NZ
TZ = GMT
MAX_TIMESTAMP_LOOKAHEAD = 28
KV_MODE = json
ANNOTATE_PUNCT = false

FIELDALIAS-dest = resourceType AS dest
FIELDALIAS-object = resourceId AS object
FIELDALIAS-object_path = ARN as object_path
FIELDALIAS-object_id = resourceId AS object_id
FIELDALIAS-result = configurationItemStatus AS result
FIELDALIAS-vendor_account = awsAccountId AS vendor_account

EVAL-change_type = "configuration"
EVAL-dvc = "AWS Config"
EVAL-status="success"
EVAL-vendor_product = "AWS Config"
LOOKUP-action= aws_config_action_lookup status AS configurationItemStatus OUTPUT action
LOOKUP-object_category = aws_config_object_category_lookup type AS resourceType OUTPUT object_category

# unify account ID field
FIELDALIAS-aws-account-id = awsAccountId as aws_account_id
FIELDALIAS-region-for-aws-config = awsRegion AS region


##################################
###      AWS Config Rule       ###
##################################

[aws:config:rule]

EXTRACT-account_id_and_region = (?P<account_id>\d+):(?P<region>[\w-]+) in source

FIELDALIAS-aws-account-id = account_id as aws_account_id
FIELDALIAS-config_rule_state_as_status = ConfigRuleState as status
FIELDALIAS-config_rule_name_as_name = ConfigRuleName as name
FIELDALIAS-description_as_description = Description as description
FIELDALIAS-account_id_as_user_id = account_id as user_id
FIELDALIAS-source_owner_as_src_user = Source.Owner as src_user
FIELDALIAS-config_rule_invoked_time_as_time = ConfigRuleInvokedTime as time
FIELDALIAS-first_activated_time_as_time = FirstActivatedTime as time
FIELDALIAS-description_as_body=Description as body


EVAL-app = "AWS Lambda function"
EVAL-dest='EvaluationResultIdentifier.EvaluationResultQualifier.ResourceId'
EVAL-enabled = if(ConfigRuleState="ACTIVE",1,0)
EVAL-severity = "medium"
EVAL-signature_id=coalesce('EvaluationResultIdentifier.EvaluationResultQualifier.ResourceType','ConfigRuleId')
EVAL-type = "alert"
EVAL-vendor_product="AWS Config"





##################################
###      AWS Description       ###
##################################


[aws:description]
MAX_TIMESTAMP_LOOKAHEAD = 1
SHOULD_LINEMERGE = false
TRUNCATE = 8388608
KV_MODE = json
ANNOTATE_PUNCT = false

## Mapping for ITSI IaaS Module ## - https://docs.splunk.com/Documentation/ITSICSM/2.4.0/ITSICSM/AbouttheSplunkITSIModuleforCloudServices
## Enterprise Security Assets and Identities Framework Interface ##

## Extraction ##
################
# Mapping for ITSI IaaS Module
EXTRACT-extract_ec2_custom_tag = \"tags\"\:\s*\{(?P<custom_tag_str>(?:\"[^\"\s]+\"\:\s*\"[^\"\s]+\"(?:,\s)?)*)


## FIELDALIAS ##
################
# Enterprise Security Identities Framework Interface - IAM_USERS
FIELDALIAS-CreateDate-for-aws-description = CreateDate as startDate
FIELDALIAS-user-id-for-aws-description = UserId AS user_id
FIELDALIAS-username-for-aws-description = UserName AS user_name

# Enterprise Security Assets Framework Interface - EC2_INSTANCES
# fields image_name and instance_type are being mapped automatically
FIELDALIAS-image_name-for-assets-lookup = image.attributes.name AS image_name

# Mapping for ITSI IaaS Module
FIELDALIAS-availabiity_zone = zone AS availability_zone
FIELDALIAS-vm_name = tags.Name as vm_name
FIELDALIAS-vm_size = instance_type AS vm_size


## EVAL ##
##########
# Common CIM - [Enterprise Security Assets Framework Interface] and [ITSI IaaS Module] specific fields -- EVAL-ip,
# EVAL-vendor_account, EVAL-vendor_region, EVAL-vpc_id
EVAL-account_id = if(isnull(owner_id), account_id, owner_id)
# aws_account_id - unify account ID field
EVAL-aws_account_id = if(isnull(owner_id), account_id, owner_id)
EVAL-ip = case(match(source, ".+\:ec2_instances"), mvappend(if(ip_address="null",null(), ip_address), if(private_ip_address="null",null(), private_ip_address)))
EVAL-region = if(isnotnull(region), region, substr(availability_zone,1,(len(availability_zone) - 1)))
EVAL-vendor = "AWS"
EVAL-vendor_account = if(isnull(owner_id), account_id, owner_id)
EVAL-vendor_region = if(isnotnull(region), region, substr(availability_zone,1,(len(availability_zone) - 1)))
EVAL-vpc_id = case(vpc_id!="null", vpc_id)
EVAL-type = coalesce('image.attributes.type', type)

# Enterprise Security Identities Framework Interface - IAM_USERS
EVAL-identity = case(match(source, ".+\:iam_users"), mvappend(if(user_id="" OR user_id="null", null(), user_id), if(user_name="" OR user_name="null", null(), user_name)))

# Enterprise Security Assets Framework Interface - EC2_INSTANCES
EVAL-dns = case(match(source, ".+\:ec2_instances"), mvappend(if(public_dns_name="" OR public_dns_name="null", null(), public_dns_name), if(private_dns_name="null", null(), private_dns_name)))
EVAL-nt_host = case(id!="null", id)
EVAL-subnet_id = case(subnet_id!="null", subnet_id)

# Mapping for ITSI IaaS Module
EVAL-custom_tag = split(custom_tag_str, ",")
EVAL-hypervisor_name = case(match(source, ".+\:ec2_instances"), hypervisor)
EVAL-power_state = case(match(source, ".+\:ec2_instances"), state)
EVAL-storage_capacity = case(match(source, ".+\:ec2_volumes"), size * 1073741824)
EVAL-vendor_product = case(match(source, "^.*:ec2_.*$"), "EC2")
EVAL-virtual_network_id = case(vpc_id!="null", vpc_id)
EVAL-virtual_subnet_id = case(subnet_id!="null", subnet_id)
EVAL-vm_id = case(match(source, ".+\:ec2_instances"), id)
EVAL-vm_os = case(match(lower(platform),"^.*linux.*$"), "Linux", match(lower(platform),"^.*windows.*$"), "Windows", true(), "Unknown")
EVAL-user_id = coalesce(user_id, account_id)
EVAL-description = coalesce(description, 'image.attributes.description')
EVAL-enabled = case('image.attributes.state'="available", "true",'state'="available", "true",('status'="in-use" OR 'status'="available"),"true",true(),"false")
EVAL-family = coalesce('image.attributes.architecture', architecture)
EVAL-snapshot = case(match(source, ".+\:ec2_instances"), coalesce('image.attributes.name',snapshot_id),true(),snapshot_id)
EVAL-time = case(match(source, ".+\:ec2_instances"), coalesce(launch_time, create_time),true(),coalesce(launch_time,create_time))
EVAL-status = case(match(source, ".+\:ec2_instances"), coalesce('image.attributes.state', state, status),true(),coalesce(status,state))


## Lookups ##
#############
# Mapping for ITSI IaaS Module
LOOKUP-sizeToAttributes = sizeToAttributesLookup instance_type OUTPUT cpu_cores, mem_capacity


##################################
###      AWS Metadata          ###
##################################


[aws:metadata]
MAX_TIMESTAMP_LOOKAHEAD = 1
SHOULD_LINEMERGE = false
TRUNCATE = 8388608
KV_MODE = json
ANNOTATE_PUNCT = false

## Mapping for ITSI IaaS Module ## - https://docs.splunk.com/Documentation/ITSICSM/2.4.0/ITSICSM/AbouttheSplunkITSIModuleforCloudServices
## Enterprise Security Assets and Identities Framework Interface ##

## FIELDALIAS ##
################
# Enterprise Security Identities Framework Interface - IAM_USERS
FIELDALIAS-image_id_for_aws_metadata = ImageId AS image_id
FIELDALIAS-CreateDate-for-aws-description = CreateDate as startDate
FIELDALIAS-user-id-for-aws-description = AccountId AS user_id
FIELDALIAS-username-for-aws-description = UserName AS user_name
FIELDALIAS-snapshot-for-aws-metadata = ImageId AS snapshot
FIELDALIAS-status-for-aws-metadata = State.Name AS status
FIELDALIAS-time-for-aws-metadata = LaunchTime AS time
FIELDALIAS-region-for-aws-metadata = Region AS region

# Enterprise Security Assets Framework Interface - EC2_INSTANCES
# fields image_name and instance_type are being mapped automatically
FIELDALIAS-image_name-for-assets-lookup = 'Image.Attributes.Name' AS image_name

# Mapping for ITSI IaaS Module
FIELDALIAS-availabiity_zone = AvailabilityZone AS availability_zone
FIELDALIAS-vm_name = 'Tags.Name' as vm_name
FIELDALIAS-vm_size = InstanceType AS vm_size


## EVAL ##
##########
# non-CIM fields
# matching search time extractions of AccountId and Region with SCDM
EVAL-AccountId=mvindex(split(source,":"),0)
EVAL-Region=mvindex(split(source,":"),1)

# Common CIM - [Enterprise Security Assets Framework Interface] and [ITSI IaaS Module] specific fields -- EVAL-ip,
# EVAL-vendor_account, EVAL-vendor_region, EVAL-vpc_id
EVAL-account_id = if(isnull(OwnerId), account_id, OwnerId)
# aws_account_id - unify account ID field
EVAL-aws_account_id = if(isnull(OwnerId), account_id, OwnerId)
EVAL-ip = case(match(source, ".+\:ec2_instances"), mvappend(if(PublicIpAddress="null",null(), PublicIpAddress), if(PrivateIpAddress="null",null(), PrivateIpAddress)))
EVAL-region = if(isnotnull(region), region, substr(AvailabilityZone,1,(len(AvailabilityZone) - 1)))
EVAL-vendor = "AWS"
EVAL-vendor_account = if(isnull(OwnerId), account_id, OwnerId)
EVAL-vendor_region = if(isnotnull(region), region, substr(AvailabilityZone,1,(len(AvailabilityZone) - 1)))
EVAL-vpc_id = case(VpcId!="null", VpcId)

# Enterprise Security Identities Framework Interface - IAM_USERS
EVAL-identity = case(match(source, ".+\:iam_users"), mvappend(if(UserId="" OR UserId="null", null(), UserId), if(UserName="" OR UserName="null", null(), UserName)))

# Enterprise Security Assets Framework Interface - EC2_INSTANCES
EVAL-dns = case(match(source, ".+\:ec2_instances"), mvappend(if(PublicDnsName="" OR PublicDnsName="null", null(), PublicDnsName), if(PrivateDnsName="null", null(), PrivateDnsName)))
EVAL-nt_host = case(InstanceId!="null", InstanceId)
EVAL-subnet_id = case(SubnetId!="null", SubnetId)

# Mapping for ITSI IaaS Module
EVAL-custom_tag = mvzip('Tags{}.Key','Tags{}.Value',":")
EVAL-hypervisor_name = case(match(source, ".+\:ec2_instances"), Hypervisor)
EVAL-power_state = case(match(source, ".+\:ec2_instances"), 'State.Name')
EVAL-storage_capacity = case(match(source, ".+\:ec2_volumes"), Size * 1073741824)
EVAL-vendor_product = case(match(source, "^.*:ec2_.*$"), "EC2")
EVAL-virtual_network_id = case(VpcId!="null", VpcId)
EVAL-virtual_subnet_id = case(SubnetId!="null", SubnetId)
EVAL-vm_id = case(match(source, ".+\:ec2_instances"), InstanceId)
EVAL-vm_os = case(match(lower(Platform),"^.*linux.*$"), "Linux", match(lower(Platform),"^.*windows.*$"), "Windows", true(), "Unknown")
EVAL-enabled = case(match(source, ".+\:ec2_instances"), if('State.Name'="running", "true", "false"))


## Lookups ##
#############
# Mapping for ITSI IaaS Module
LOOKUP-sizeToAttributes = sizeToAttributesLookup instance_type as InstanceType OUTPUT cpu_cores, mem_capacity


##################################
###    AWS CloudWatch Logs     ###
##################################

###################
##   GuardDuty   ##
###################
[aws:cloudwatchlogs:guardduty]

## Aliases ##
#############
# non-CIM
FIELDALIAS-findingCategory = detail.type as finding_category
FIELDALIAS-raw_gd_type = detail.type AS raw_gd_type
FIELDALIAS-aws-guardduty-signature = detail.title AS signature

# Common CIM
FIELDALIAS-aws-guardduty-vendor_account = detail.accountId as vendor_account
FIELDALIAS-aws-guardduty-vendor_region = detail.region AS vendor_region

# Alerts CIM - https://docs.splunk.com/Documentation/CIM/4.20.0/User/Alerts
# TAGS alert
FIELDALIAS-aws-guardduty-description = detail.description AS description
FIELDALIAS-aws-guardduty-body = detail.description AS body
FIELDALIAS-aws-guardduty-id = detail.id AS id
FIELDALIAS-aws-guardduty-severity_id = detail.severity AS severity_id
FIELDALIAS-aws-guardduty-signature_id = detail.type AS signature_id
FIELDALIAS-gd-type-subj = detail.type AS subject


## Eval ##
##########
# Common CIM
EVAL-app = "AWS GuardDuty"
EVAL-severity = case(severity_id<=4, "low", severity_id<=7, "medium", severity_id<=9, "high")

# Alerts CIM
EVAL-dest = if('detail.service.resourceRole'="TARGET", case('detail.resource.resourceType'="Instance", 'detail.resource.instanceDetails.instanceId', \
            'detail.resource.resourceType'="AccessKey", 'detail.resource.accessKeyDetails.principalId', 'detail.resource.resourceType'="S3Bucket", coalesce('detail.resource.s3BucketDetails{}.name', \
            'detail.resource.s3BucketDetails{}.arn'), 1==1, ""), null())
EVAL-dest_name = if('detail.service.resourceRole'="TARGET" AND 'detail.resource.resourceType'="AccessKey", 'detail.resource.accessKeyDetails.userName', null())
EVAL-findingType = "alert"
EVAL-src = case('detail.service.resourceRole'="ACTOR", case('detail.resource.resourceType'="Instance", 'detail.resource.instanceDetails.instanceId', \
            'detail.resource.resourceType'="AccessKey",'detail.resource.accessKeyDetails.principalId', 'detail.resource.resourceType'="S3Bucket", coalesce('detail.resource.s3BucketDetails{}.name', \
            'detail.resource.s3BucketDetails{}.arn'), 1==1, ""), 'detail.service.resourceRole'="TARGET", coalesce('detail.service.action.awsApiCallAction.remoteIpDetails.ipAddressV4', \
            'detail.service.action.networkConnectionAction.remoteIpDetails.ipAddressV4', 'detail.service.action.networkConnectionAction.localIpDetails.ipAddressV4'))
EVAL-src_name = if('detail.service.resourceRole'="ACTOR" AND 'detail.resource.resourceType'="AccessKey", 'detail.resource.accessKeyDetails.userName', null())
EVAL-type = "alert"
EVAL-user = if('detail.resource.resourceType'="AccessKey", 'detail.resource.accessKeyDetails.userName', null())
EVAL-vendor_product = "AWS GuardDuty"
EVAL-dest_type = 'detail.resource.resourceType'

## Lookups ##
#############
# Alerts CIM
LOOKUP-guardduty-mitre_technique_id = aws_gd_mitre_technique_id_lookup signature_id OUTPUTNEW mitre_technique_id
LOOKUP-gd-src-type = aws-gd-resourceType_lookup resource_type AS detail.resource.resourceType, resource_role AS detail.service.resourceRole OUTPUTNEW src_type

###################
## VPC Flow Logs ##
###################
[aws:cloudwatchlogs:vpcflow]
SHOULD_LINEMERGE = false
TIME_FORMAT = %s
TIME_PREFIX = ^(?>\S+\s){10}
MAX_TIMESTAMP_LOOKAHEAD = 10  # makes sure account_id is not used for timestamp

## Extraction ##
################
EXTRACT-vpcflowlog=^\s*(\d{4}-\d{2}-\d{2}.\d{2}:\d{2}:\d{2}[.\d\w]*)?\s*(?<version>[^\s]+)\s+(?<account_id>[^\s]+)\s+(?<interface_id>[^\s]+)\s+(?<src_ip>[^\s]+)\s+(?<dest_ip>[^\s]+)\s+(?<src_port>[^\s]+)\s+(?<dest_port>[^\s]+)\s+(?<protocol_code>[^\s]+)\s+(?P<packets>[^\s]+)\s+(?<bytes>[^\s]+)\s+(?<start_time>[^\s]+)\s+(?<end_time>[^\s]+)\s+(?<vpcflow_action>[^\s]+)\s+(?<log_status>[^\s]+)
REPORT-region = extract-region

## Aliases ##
#############
#unify account ID field
FIELDALIAS-aws-account-id = account_id as aws_account_id 
FIELDALIAS-user_id = account_id as user_id
FIELDALIAS-dest = dest_ip as dest
FIELDALIAS-dvc = interface_id as dvc
FIELDALIAS-src = src_ip as src
FIELDALIAS-vendor_account = account_id as vendor_account

## Eval ##
##########
EVAL-app = "AWS VPC Flow Logs"
EVAL-bytes = if(bytes!="-", bytes, "unknown")
EVAL-dest = if(dest!="-", dest, "unknown")
EVAL-dest_ip = if(dest_ip!="-", dest_ip, "unknown")
EVAL-dest_port = if(dest_port!="-", dest_port, "unknown")
EVAL-duration=end_time-start_time
EVAL-packets = if(packets!="-", packets, "unknown")
EVAL-protocol_code = if(protocol_code!="-", protocol_code, "unknown")
EVAL-protocol_version = case(match(dest_ip,"((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"),"IPV4",dest_ip="-" OR dest_ip="unknown", "unknown", match(dest_ip,"(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:))"),"IPV6")
EVAL-src = if(src!="-", src, "unknown")
EVAL-src_port = if(src_port!="-", src_port, "unknown")
EVAL-src_ip = if(src_ip!="-", src_ip, "unknown")
EVAL-vendor_product = "AWS VPC Flow Logs"
EVAL-vpcflow_action = if(vpcflow_action!="-", vpcflow_action, "unknown")


## Lookups ##
##########
LOOKUP-action=vpcflow_action_lookup vpcflow_action OUTPUT action
LOOKUP-protocol-and-transport=vpcflow_protocol_code_lookup protocol_code OUTPUT protocol transport protocol_full_name


##################################
###      AWS Inspector         ###
##################################
[aws:inspector]

EVAL-type = "event"
EXTRACT-account_id_and_region = (?P<account_id>\d+):(?P<region>[\w-]+) in source


FIELDALIAS-state_as_status = state as status
FIELDALIAS-created_at_as_time = createdAt as time
FIELDALIAS-service_as_app = service as app
FIELDALIAS-title_as_subject = title as subject
FIELDALIAS-account_id_as_user_id = account_id as user_id
FIELDALIAS-account_id_as_aws_account_id = account_id as aws_account_id
FIELDALIAS-description_as_body = description as body
FIELDALIAS-numericSeverity_as_severity_id = numericSeverity as severity_id
FIELDALIAS-account_id_as_vendor_account = account_id as vendor_account


## Eval ##
##########
EVAL-dest=mvindex('attributes{}.value',mvfind('attributes{}.key',"^INSTANCE_ID$"))
EVAL-vendor_account = if(match(source, ".+\:inspector:finding"), account_id, null())
EVAL-vendor_product="AWS Inspector"



##################################
###         AWS S3             ###
##################################

[aws:s3]
SHOULD_LINEMERGE = false
REPORT-aws_s3_extract_fields = aws_s3_extract_fields, aws_s3_http_method

EVAL-bytes = if(isnotnull(BytesSent) AND BytesSent!="-", BytesSent, null())
EVAL-bytes_out = if(isnotnull(BytesSent) AND BytesSent!="-", BytesSent, null())
EVAL-category = "Amazon S3"
EVAL-dest = if(isnotnull(HostHeader) AND HostHeader!="-", HostHeader, null())
EVAL-error_code = if(isnotnull(ErrorCode) AND ErrorCode!="-", ErrorCode, null())
EVAL-http_user_agent = if(isnotnull(UserAgent) AND UserAgent!="-", UserAgent, null())
EVAL-http_referrer = if(isnotnull(Referer) AND Referer!="-", Referer, null())
EVAL-http_referrer_domain = if(isnotnull(Referer) AND Referer!="-", replace(Referer,"^.*?((?:[\w-]+\.)?[a-zA-Z]+\.[a-zA-Z]+)(?=\/|:|\?|$).*","\1"), null())
EVAL-http_user_agent_length = if(isnotnull(UserAgent) AND UserAgent!= "", len(UserAgent), 0)
EVAL-http_method = if(isnotnull(HTTPMethod) AND HTTPMethod!="-", HTTPMethod, null())
EVAL-operation = if(isnotnull(OperationKey) AND OperationKey!="-", OperationKey, null())
EVAL-response_time = if(isnotnull(TotalTime) AND TotalTime!="-" AND TotalTime!="-1", TotalTime, null())
EVAL-src = if(isnotnull(RemoteIp) AND RemoteIp!="-", RemoteIp, null())
EVAL-src_ip = if(isnotnull(RemoteIp) AND RemoteIp!="-", RemoteIp, null())
EVAL-storage_name = if(isnotnull(BucketName) AND BucketName!="-", BucketName, null())
EVAL-status = if(isnotnull(HTTPStatus) AND HTTPStatus!="-", HTTPStatus, null())
EVAL-user = if(isnotnull(Requester) AND Requester!="-", Requester, null())
EVAL-url_length = len(if(TLSVersion!="-", "https://", "http://"). "" .HostHeader. "" .if(RequestURIPath!="-", RequestURIPath, ""))
EVAL-url = if(TLSVersion!="-", "https://", "http://"). "" .HostHeader. "" .if(RequestURIPath!="-", RequestURIPath, "")
EVAL-url_domain = if(isnotnull(HostHeader) AND HostHeader!="-", replace(HostHeader,"^.*?((?:[\w-]+\.)?[a-zA-Z]+\.[a-zA-Z]+)(?=\/|:|\?|$).*","\1"), null())
EVAL-vendor_product = "AWS S3"

LOOKUP-awb_action_lookup = aws_web_action_lookup status as HTTPStatus OUTPUT status_description as action

## Classic Load Balancer ##
[source::...(/|\\)\d+_elasticloadbalancing_*.log]
EXTRACT-elb = ^\s*(?P<timestamp>\S+)(\s+(?P<elb>\S+))(\s+(?P<client_ip>[\d.]+):(?P<client_port>\d+))(\s+(?P<backend>\S+))(\s+(?P<request_processing_time>\S+))(\s+(?P<backend_processing_time>\S+))(\s+(?P<response_processing_time>\S+))(\s+(?P<elb_status_code>\S+))(\s+(?P<backend_status_code>\S+))(\s+(?P<received_bytes>\d+))(\s+(?P<sent_bytes>\d+))(\s+"(?P<request>[^"]+)")(\s+"(?P<user_agent>[^"]+)")(\s+(?P<ssl_cipher>\S+))(\s+(?P<ssl_protocol>\S+))

EVAL-rtt = request_processing_time + backend_processing_time + response_processing_time

## Application Load Balancer ##
[source::...(/|\\)\d+_elasticloadbalancing_*.log.gz]
EXTRACT-elb = ^\s*(?P<type>\S+)(\s+(?P<timestamp>\S+))(\s+(?P<elb>\S+))(\s+(?P<client_ip>[\d.]+):(?P<client_port>\d+))(\s+(?P<target>\S+))(\s+(?P<request_processing_time>\S+))(\s+(?P<target_processing_time>\S+))(\s+(?P<response_processing_time>\S+))(\s+(?P<elb_status_code>\S+))(\s+(?P<target_status_code>\S+))(\s+(?P<received_bytes>\d+))(\s+(?P<sent_bytes>\d+))(\s+"(?P<request>[^"]+)")(\s+"(?P<user_agent>[^"]+)")(\s+(?P<ssl_cipher>\S+))(\s+(?P<ssl_protocol>\S+))(\s+(?P<target_group_arn>\S+))(\s+"(?P<trace_id>[^"]+)")(\s+"(?P<domain_name>[^"]+)")?(\s+"(?P<chosen_cert_arn>[^"]+)")?(\s+(?P<matched_rule_priority>\S+))?(\s+(?P<request_creation_time>\S+))?(\s+"(?P<actions_executed>[^"]+)")?(\s+"(?P<redirect_url>[^"]+)")?(\s+"(?P<error_reason>[^"]+)")?

EVAL-rtt = request_processing_time + target_processing_time + response_processing_time

[aws:s3:accesslogs]
SHOULD_LINEMERGE=false
TIME_FORMAT=%d/%b/%Y:%H:%M:%S %z
TIME_PREFIX=\s\[

REPORT-s3 = aws_s3_accesslogs_extract_all_fields

# Web CIM Mapping
FIELDALIAS-app = host_header as app
FIELDALIAS-duration = total_time as duration
FIELDALIAS-dest = host_header as dest
FIELDALIAS-file_path = key as file_path

EVAL-bytes_out = if(bytes_sent!="-", bytes_sent, 0)
EVAL-bytes = if(bytes_sent!="-", bytes_sent, 0)
EVAL-category = "Amazon S3"
EVAL-error_code = if(error_code != "-", error_code, "")
EVAL-http_user_agent = if(isnotnull(user_agent) AND user_agent!="-", user_agent, null())
EVAL-http_user_agent_length = if(isnotnull(user_agent) AND user_agent!= "", len(user_agent), 0)
EVAL-http_referrer_domain = if(isnotnull(referrer) AND referrer!="-", replace(referrer,"^.*?((?:[\w-]+\.)?[a-zA-Z]+\.[a-zA-Z]+)(?=\/|:|\?|$).*","\1"), null())
EVAL-http_referrer = if(isnotnull(referrer) AND referrer!="-", referrer, null())
EVAL-host_header = if(isnotnull(host_header) AND host_header!="-", host_header, null())
EVAL-response_time = if(isnotnull(total_time) AND total_time!="-" AND total_time!="-1", total_time, null())
EVAL-status = if(isnotnull(http_status) AND http_status!="-", http_status, null())
EVAL-storage_name = if(isnotnull(bucket_name) AND bucket_name!="-", bucket_name, null())
EVAL-src = if(isnotnull(remote_ip) AND remote_ip!="-", remote_ip, null())
EVAL-src_ip = if(isnotnull(remote_ip) AND remote_ip!="-", remote_ip, null())
# spliting uri(/path/to/file?param1=value1&param2=value2&param2=value2) with "?"
EVAL-uri_path = mvindex(split(uri, "?"), 0)
EVAL-uri_query = mvindex(split(uri, "?"), 1)
EVAL-user = if(authentication_type == "authenticated", requester, "")
EVAL-url = if(tls_version!="-", "https://", "http://"). "" .host_header. "" .if(uri!="-", uri, "")
EVAL-url_domain = if(isnotnull(host_header) AND host_header!="-", replace(host_header,"^.*?((?:[\w-]+\.)?[a-zA-Z]+\.[a-zA-Z]+)(?=\/|:|\?|$).*","\1"), null())
EVAL-url_length = len(if(tls_version!="-", "https://", "http://"). "" .host_header. "" .if(uri!="-", uri, ""))
EVAL-vendor_product = "AWS S3"

LOOKUP-awb_action_lookup = aws_web_action_lookup status as http_status OUTPUT status_description as action

[aws:cloudfront:accesslogs]

REPORT-cloudfront_web_extracy = cloudfront_web, cloudfront_rtmp


EVAL-app = "CloudFront"
EVAL-bytes = sc_bytes + cs_bytes
EVAL-category="AWS CloudFront"
EVAL-cached = case(sc_status="403", null(), x_edge_result_type in ("Hit", "RefreshHit", "OriginShieldHit"), "true", true(), "false")
EVAL-dest = if(isnotnull(x_host_header) AND x_host_header!="-", replace(x_host_header,"^.*?((?:[\w-]+\.)?[a-zA-Z]+\.[a-zA-Z]+)(?=\/|:|\?|$).*","\1"), null())
EVAL-url = if(isnotnull(ssl_protocol) AND ssl_protocol!="", "https://", "http://"). "" .x_host_header. "" .if(cs_uri_stem!="-", cs_uri_stem, ""). "" .if(cs_uri_query!="-", cs_uri_query, "")
EVAL-url_length = len(if(isnotnull(ssl_protocol) AND ssl_protocol!="", "https://", "http://"). "" .x_host_header. "" .if(cs_uri_stem!="-", cs_uri_stem, ""). "" .if(cs_uri_query!="-", cs_uri_query, ""))
EVAL-bytes_out = if(sc_bytes!="-" AND isnotnull(sc_bytes), sc_bytes, null())
EVAL-bytes_in = if(cs_bytes!="-" AND isnotnull(cs_bytes), cs_bytes, null())
EVAL-cookie = if(cs_cookie!="-" AND isnotnull(cs_cookie), cs_cookie, null())
EVAL-client_ip = if(c_ip!="-" AND isnotnull(c_ip), c_ip, null())
EVAL-duration = if(time_taken!="-" AND time_taken!="-1" AND isnotnull(time_taken), time_taken, null())
EVAL-http_user_agent_length = if(isnotnull(cs_user_agent) AND cs_user_agent!="", len(cs_user_agent), 0)
EVAL-http_content_type = if(sc_content_type!="-" AND isnotnull(sc_content_type), sc_content_type, null())
EVAL-http_user_agent = if(cs_user_agent!="-" AND isnotnull(cs_user_agent), cs_user_agent, null())
EVAL-http_referrer_domain = if(isnotnull(cs_referer) AND cs_referer!="-", replace(cs_referer,"^.*?((?:[\w-]+\.)?[a-zA-Z]+\.[a-zA-Z]+)(?=\/|:|\?|$).*","\1"), null())
EVAL-http_referrer = if(cs_referer!="-" AND isnotnull(cs_referer), cs_referer, null())
EVAL-http_method = if(cs_method!="-" AND isnotnull(cs_method), cs_method, null())
EVAL-response_time = if(time_taken!="-" AND time_taken!="-1" AND isnotnull(time_taken), time_taken, null())
EVAL-status = if(sc_status!="-" AND isnotnull(sc_status), sc_status, null())
EVAL-src = if(c_ip!="-" AND isnotnull(c_ip), c_ip, null())
EVAL-src_ip = if(c_ip!="-" AND isnotnull(c_ip), c_ip, null())
EVAL-src_port = if(c_port!="-" AND isnotnull(c_port), c_port, null())
EVAL-time_taken=time_taken*1000
EVAL-url_domain = if(isnotnull(x_host_header) AND x_host_header!="-", replace(x_host_header,"^.*?((?:[\w-]+\.)?[a-zA-Z]+\.[a-zA-Z]+)(?=\/|:|\?|$).*","\1"), null())
EVAL-uri_query = if(cs_uri_query!="-" AND isnotnull(cs_uri_query), cs_uri_query, null())
EVAL-uri_path = if(cs_uri_stem!="-" AND isnotnull(cs_uri_stem), cs_uri_stem, null())
EVAL-vendor_product = "AWS CloudFront"

# take twice due to AWS's bugfix.
# https://forums.aws.amazon.com/thread.jspa?threadID=134017
EVAL-cs_uri_stem=urldecode(urldecode(cs_uri_stem))

LOOKUP-x_edge_location=cloudfront_edge_location_lookup x_edge_location OUTPUT edge_location_name
LOOKUP-awb_action_lookup = aws_web_action_lookup status as sc_status OUTPUT status_description as action

[aws:elb:accesslogs]

REPORT-report_aws_elb_accesslogs = aws_elb_accesslogs_extract_all_fields, aws_elb_request_target_ip_target_port

EVAL-app = "AWS ELB"
EVAL-bytes = ReceivedBytes + SentBytes
EVAL-bytes_out = if(isnotnull(SentBytes) AND SentBytes!="-", SentBytes, null())
EVAL-bytes_in = if(isnotnull(ReceivedBytes) AND ReceivedBytes!="-", ReceivedBytes, null())
EVAL-category = "AWS ELB"
EVAL-dest_port = if(isnotnull(RequestTargetPort) AND RequestTargetPort!="-", RequestTargetPort, null())
EVAL-dest = if(isnotnull(RequestTargetIP) AND RequestTargetIP!="-", RequestTargetIP, null())
EVAL-http_method = mvindex(split(Request, " "), 0)
EVAL-http_user_agent_length = if(isnotnull(UserAgent) AND UserAgent!="", len(UserAgent), 0)
EVAL-http_user_agent = if(isnotnull(UserAgent) AND UserAgent!="-", UserAgent, null())
EVAL-response_time = if(ResponseProcessingTime!="-1", ResponseProcessingTime, null())
EVAL-src = mvindex(split(ClientPort, ":"), 0)
EVAL-src_ip = mvindex(split(ClientPort, ":"), 0)
EVAL-src_port = mvindex(split(ClientPort, ":"), 1)
EVAL-status = if(isnotnull(ELBStatusCode) AND ELBStatusCode!="-", ELBStatusCode, null())
EVAL-url = mvindex(split(Request, " "), 1)
EVAL-url_length = len(mvindex(split(Request, " "), 1))
EVAL-vendor_product = "AWS ELB"

LOOKUP-awb_action_lookup = aws_web_action_lookup status as ELBStatusCode OUTPUT status_description as action



###################################
###           AWS SQS           ###
###################################
[aws:sqs]
KV_MODE = json


########################################################
###  Forward Compatibility Support (Boto2 -> Boto3)  ###
########################################################
[source::*:ec2_reserved_instances]
FIELDALIAS-id_alias = ReservedInstancesId as id
FIELDALIAS-offering_type_alias = OfferingType as offering_type
FIELDALIAS-instance_count_alias = InstanceCount as instance_count
FIELDALIAS-availability_zone_alias = AvailabilityZone as availability_zone
FIELDALIAS-instance_type_alias = InstanceType as instance_type
FIELDALIAS-instance_tenancy_alias = InstanceTenancy as instance_tenancy
FIELDALIAS-state_alias = State as state
FIELDALIAS-fixed_price_alias = FixedPrice as fixed_price
FIELDALIAS-description_alias = ProductDescription as description
FIELDALIAS-usage_price_alias = UsagePrice as usage_price
FIELDALIAS-currency_code_alias = CurrencyCode as currency_code
FIELDALIAS-start_alias = Start as start
FIELDALIAS-end_alias = End as end
FIELDALIAS-duration_alias = Duration as duration

## Migrated source from AWS Kinesis TA Deprecation ##

##########################################
###      CloudWatch - SecurityHub      ###
##########################################
[source::aws_cloudwatchevents_securityhub]
SHOULD_LINEMERGE = false
TIME_PREFIX = \"UpdatedAt\"\s*\:\s*\"
TIME_FORMAT = %Y-%m-%dT%H:%M:%S%Z
SEDCMD-remove_foot = s/}]}]}}(,?)/}]}/g
SEDCMD-remove_header = s/^\[//g
SEDCMD-remove_footer = s/\]$//g
SEDCMD-remove_preable = s/{"version(.*?)findings\":\[//g
LINE_BREAKER = [}\]}|{"findings":\[](,?){"ProductArn"

## Migrated source from AWS Kinesis TA Deprecation ##

[aws:securityhub:finding]
KV_MODE = json
## Extraction ##
################
# Alerts CIM - https://docs.splunk.com/Documentation/CIM/4.20.0/User/Alerts
REPORT-aws-securityhub-id-dest-extract=aws-securityhub-dest-instance-extract, aws-securityhub-dest-iam_accesskey-extract, aws-securityhub-dest-s3-extract, aws-securityhub-dest-managed-instance-extract, aws-securityhub-dest-volume-extract, aws-securityhub-dest-security-group-extract, aws-securityhub-dest-vpc-extract, aws_security_hub_app_report, aws_securityhub_account_user_report, aws_securityhub_dest_iam_user_report


## Aliases ##
#############
# Common CIM
FIELDALIAS-aws-securityhub-vendor_account = AwsAccountId AS vendor_account
FIELDALIAS-aws-securityhub-vendor_region =  Resources{}.Region AS vendor_region

# Alerts CIM
FIELDALIAS-aws-securityhub-body = Description AS body
FIELDALIAS-aws-securityhub-description = Description AS description
FIELDALIAS-aws-securityhub-dest_ip = Resources{}.Details.AwsEc2Instance.IpV4Addresses{} AS dest_ip
FIELDALIAS-aws-securityhub-dest_type = Resources{}.Type AS dest_type
FIELDALIAS-aws-securityhub-severity_id = Severity.Normalized AS severity_id
FIELDALIAS-aws-securityhub-signature = Title AS signature
FIELDALIAS-aws-securityhub-signature_id = GeneratorId AS signature_id
FIELDALIAS-aws-securityhub-subject = Title AS subject


## Eval ##
##########
# Common CIM
EVAL-recommendation = mvappend('Remediation.Recommendation.Text', 'Remediation.Recommendation.Url')

# Alerts CIM
EVAL-dest = coalesce((case('Resources{}.ResourceRole'="ACTOR" OR 'ProductFields.aws/guardduty/service/resourceRole'="ACTOR", null(),\
            (NOT ("Resources{}.ResourceRole"="ACTOR" OR "ProductFields.aws/guardduty/service/resourceRole"="ACTOR")), \
            if(mvcount('Resources{}.Type') > 1, \
            mvappend(case('Resources{}.Type'="AwsEc2Instance", instance_extract), case('Resources{}.Type'="AwsIamAccessKey", accesskey_extract), \
            case('Resources{}.Type'="AwsIamUser", user_extract), case('Resources{}.Type'="AwsS3Bucket", s3bucket_extract), \
            case('Resources{}.Type'="AwsEc2Vpc", vpc_extract), case('Resources{}.Type'="AwsEc2Volume", volume_extract), \
            case('Resources{}.Type'="AwsSsmAssociationCompliance", managed_instance_extract), \
            case('Resources{}.Type'="AwsSsmPatchCompliance", managed_instance_extract), case('Resources{}.Type'="AwsEc2SecurityGroup", security_group_extract)), \
            if('Resources{}.Type'="AwsEc2Instance", instance_extract, if('Resources{}.Type'="AwsS3Bucket", s3bucket_extract, \
            if('Resources{}.Type'="AwsIamAccessKey", accesskey_extract, if('Resources{}.Type'="AwsEc2SecurityGroup", security_group_extract, \
            if('Resources{}.Type'="AwsEc2Vpc", vpc_extract, if('Resources{}.Type'="AwsEc2Volume", volume_extract,\
            if('Resources{}.Type'="AwsSsmAssociationCompliance", managed_instance_extract, \
            if('Resources{}.Type'="AwsSsmPatchCompliance", managed_instance_extract, \
            if('Resources{}.Type'="AwsIamUser", user_extract, replace('Resources{}.Id', ".*:", ""))))))))))))), 'Resources{}.Details.AwsEc2Instance.IpV4Addresses{}')
EVAL-dest_name = coalesce('Resources{}.Details.AwsIamUser.UserName', \
            (case('Resources{}.ResourceRole'="ACTOR" OR 'ProductFields.aws/guardduty/service/resourceRole'="ACTOR", null(), \
            (NOT ("Resources{}.ResourceRole"="ACTOR" OR "ProductFields.aws/guardduty/service/resourceRole"="ACTOR")), \
            if(mvcount('Resources{}.Type') > 1, \
            mvappend(case('Resources{}.Type'="AwsEc2Instance", instance_extract), case('Resources{}.Type'="AwsIamAccessKey", accesskey_extract), \
            case('Resources{}.Type'="AwsIamUser", user_extract), case('Resources{}.Type'="AwsS3Bucket", s3bucket_extract), \
            case('Resources{}.Type'="AwsEc2Vpc", vpc_extract), case('Resources{}.Type'="AwsEc2Volume", volume_extract), \
            case('Resources{}.Type'="AwsSsmAssociationCompliance" OR 'Resources{}.Type'="AwsSsmPatchCompliance", managed_instance_extract), \
            case('Resources{}.Type'="AwsEc2SecurityGroup", security_group_extract)), \
            if('Resources{}.Type'="AwsEc2Instance", instance_extract, if('Resources{}.Type'="AwsS3Bucket", s3bucket_extract, \
            if('Resources{}.Type'="AwsIamAccessKey", accesskey_extract, if('Resources{}.Type'="AwsEc2SecurityGroup", security_group_extract, \
            if('Resources{}.Type'="AwsEc2Vpc", vpc_extract, if('Resources{}.Type'="AwsEc2Volume", volume_extract, \
            if('Resources{}.Type'="AwsSsmAssociationCompliance", managed_instance_extract, \
            if('Resources{}.Type'="AwsSsmPatchCompliance", managed_instance_extract, \
            if('Resources{}.Type'="AwsIamUser", user_extract, replace('Resources{}.Id', ".*:", ""))))))))))))))
EVAL-id = replace(Id,"(?:.*)\/(.*)","\1")
EVAL-severity=lower('Severity.Label')
EVAL-src = coalesce((case('Resources{}.ResourceRole'="ACTOR" OR 'ProductFields.aws/guardduty/service/resourceRole'="ACTOR", \
            if(mvcount('Resources{}.Type') > 1, \
            mvappend(case('Resources{}.Type'="AwsEc2Instance", instance_extract), case('Resources{}.Type'="AwsIamAccessKey", accesskey_extract), \
            case('Resources{}.Type'="AwsIamUser", user_extract), case('Resources{}.Type'="AwsS3Bucket", s3bucket_extract), \
            case('Resources{}.Type'="AwsEc2Vpc", vpc_extract), case('Resources{}.Type'="AwsEc2Volume", volume_extract), \
            case('Resources{}.Type'="AwsSsmAssociationCompliance", managed_instance_extract), \
            case('Resources{}.Type'="AwsSsmPatchCompliance", managed_instance_extract), case('Resources{}.Type'="AwsEc2SecurityGroup", security_group_extract)), \
            if('Resources{}.Type'="AwsEc2Instance", instance_extract, if('Resources{}.Type'="AwsS3Bucket", s3bucket_extract, \
            if('Resources{}.Type'="AwsIamAccessKey", accesskey_extract, if('Resources{}.Type'="AwsEc2SecurityGroup", security_group_extract, \
            if('Resources{}.Type'="AwsEc2Vpc", vpc_extract, if('Resources{}.Type'="AwsEc2Volume", volume_extract, \
            if('Resources{}.Type'="AwsSsmAssociationCompliance", managed_instance_extract, \
            if('Resources{}.Type'="AwsSsmPatchCompliance", managed_instance_extract, \
            if('Resources{}.Type'="AwsIamUser", user_extract, replace('Resources{}.Id', ".*:", ""))))))))))), \
            (NOT ("Resources{}.ResourceRole"="ACTOR" OR "ProductFields.aws/guardduty/service/resourceRole"="ACTOR")), null())), \
            'ProductFields.aws/guardduty/service/action/networkConnectionAction/remoteIpDetails/ipAddressV4', 'ProductFields.aws/guardduty/service/action/awsApiCallAction/remoteIpDetails/ipAddressV4')
EVAL-src_ip = coalesce('ProductFields.aws/guardduty/service/action/networkConnectionAction/remoteIpDetails/ipAddressV4', 'ProductFields.aws/guardduty/service/action/awsApiCallAction/remoteIpDetails/ipAddressV4')
EVAL-src_name = case('Resources{}.ResourceRole'="ACTOR" OR 'ProductFields.aws/guardduty/service/resourceRole'="ACTOR", \
            if(mvcount('Resources{}.Type') > 1, \
            mvappend(case('Resources{}.Type'="AwsEc2Instance", instance_extract), case('Resources{}.Type'="AwsIamAccessKey", accesskey_extract), \
            case('Resources{}.Type'="AwsIamUser", user_extract), case('Resources{}.Type'="AwsS3Bucket", s3bucket_extract)), \
            if('Resources{}.Type'="AwsEc2Instance", instance_extract, if('Resources{}.Type'="AwsS3Bucket", s3bucket_extract, \
            if('Resources{}.Type'="AwsIamAccessKey", accesskey_extract, if('Resources{}.Type'="AwsIamUser", user_extract, 'Resources{}.Id'))))), \
            (NOT ("Resources{}.ResourceRole"="ACTOR" OR "ProductFields.aws/guardduty/service/resourceRole"="ACTOR")), null())
EVAL-src_type = case('Resources{}.ResourceRole'="ACTOR" OR 'ProductFields.aws/guardduty/service/resourceRole'="ACTOR",  \
            if(mvcount('Resources{}.Type') > 1, \
            mvappend(case('Resources{}.Type'="AwsEc2Instance", "instance"), case('Resources{}.Type'="AwsEc2Volume", "disk"), \
            case('Resources{}.Type'="AwsIamAccessKey" OR 'Resources{}.Type'="AwsIamUser", "user"), case('Resources{}.Type'="AwsEc2SecurityGroup", "firewall"), \
            case('Resources{}.Type'="AwsS3Bucket", "storage"), case('Resources{}.Type'="AwsIamRole", "role"), case('Resources{}.Type'="AwsEc2Eip", "public ip")), \
            if('Resources{}.Type'="AwsEc2Instance", "instance", if('Resources{}.Type'="AwsEc2Volume", "disk", if('Resources{}.Type'="AwsS3Bucket", "storage", \
            if('Resources{}.Type'="AwsEc2SecurityGroup", "firewall", if('Resources{}.Type'="AwsIamAccessKey" OR 'Resources{}.Type'="AwsIamUser", "user", \
            if('Resources{}.Type'="AwsIamRole", "role", if('Resources{}.Type'="AwsEc2Eip", "public ip", 'Resources{}.Type')))))))), \
            (NOT ("Resources{}.ResourceRole"="ACTOR" OR "ProductFields.aws/guardduty/service/resourceRole"="ACTOR")), null())
EVAL-type = case('Severity.Label'="INFORMATIONAL", "event", 'Severity.Label'="LOW", "warning", 'Severity.Label'="MEDIUM", "alert", 'Severity.Label'="HIGH", "alert", 'Severity.Label'="CRITICAL", "alarm")
EVAL-user = coalesce(case('Resources{}.Type'="AwsIamUser", 'Resources{}.Details.AwsIamUser.UserId'), 'Resources{}.Details.AwsIamAccessKey.PrincipalName', account_user)

## Migrated source from AWS Kinesis TA Deprecation ##

[aws:firehose:json]
pulldown_type = true
INDEXED_EXTRACTIONS = json
SHOULD_LINEMERGE = false
category = Structured
description = JavaScript Object Notation format. For more information, visit http://json.org/

## Migrated source from AWS Kinesis TA Deprecation ##

[aws:firehose:text]
SHOULD_LINEMERGE = false

## Migrated source from AWS Kinesis TA Deprecation ##

##############################################
###      CloudWatch - Access Analyzer      ###
##############################################
[source::aws_eventbridgeevents_iam_aa]
TRANSFORMS-extract_detail_from_cloudwatch_events=extract_detail_from_cloudwatch_events
TRANSFORMS-use_for_accessanalyzer_sourcetype_change=use_for_accessanalyzer_sourcetype_change
KV_MODE = json
SHOULD_LINEMERGE = false
TIME_PREFIX = \"createdAt\"\s*\:\s*\"
TIME_FORMAT = %Y-%m-%dT%H:%M:%S%Z
LINE_BREAKER=(([\r\n]+)|(?={"version":"[\S.]","id":))

## Migrated source from AWS Kinesis TA Deprecation ##

[aws:accessanalyzer:finding]


## Migrated source from AWS Kinesis TA Deprecation ##

########################################
###      CloudWatch - Events      ###
########################################
[aws:firehose:cloudwatchevents]
SHOULD_LINEMERGE = false
TRUNCATE = 8388608
TIME_PREFIX = \"time\"\s*\:\s*\"
TIME_FORMAT = %Y-%m-%dT%H:%M:%S%Z
MAX_TIMESTAMP_LOOKAHEAD = 40
KV_MODE = json

## Migrated source from AWS Kinesis TA Deprecation ##
########################################
###      CloudWatch - GuardDuty      ###
########################################
[source::aws_cloudwatchevents_guardduty]
TRANSFORMS-extract_detail_from_cloudwatch_events=extract_detail_from_cloudwatch_events
TRANSFORMS-use_for_guardduty_sourcetype_change=use_for_guardduty_sourcetype_change
LINE_BREAKER=(([\r\n]+)|(?={"version":"[\d.]+","id":))
SHOULD_LINEMERGE = false
NO_BINARY_CHECK = false
TRUNCATE = 8388608
TIME_PREFIX = \"time\"\s*\:\s*\"
TIME_FORMAT = %Y-%m-%dT%H:%M:%S%Z
MAX_TIMESTAMP_LOOKAHEAD = 40

## Migrated source from AWS Kinesis TA Deprecation ##

[aws:cloudwatch:guardduty]
KV_MODE = json
SHOULD_LINEMERGE = 0

## Extraction ##
################
# Intrusion Detection CIM
# transforms entries for extracting smaller details
REPORT-aws_guardduty_details = aws_guardduty_details
REPORT-aws_guardduty_objects = aws_guardduty_object
REPORT-aws_guardduty_affectedResources = aws_guardduty_affectedResources, aws_guardduty_key_value, aws_guardduty_count_aws

## Aliases ##
#############
# non-CIM
FIELDALIAS-aob_gen_aws_cloudwatch_guardduty_alias_6 = resource.instanceDetails.availabilityZone AS aws_az
FIELDALIAS-gd-resource-agg-inst = resource.instanceDetails.instanceId as instanceId
FIELDALIAS-lat = service.action.awsApiCallAction.remoteIpDetails.geoLocation.lat AS lat service.action.networkConnectionAction.remoteIpDetails.geoLocation.lat AS lat service.action.portProbeAction.portProbeDetails{}.remoteIpDetails.geoLocation.lat AS lat
FIELDALIAS-lon = service.action.awsApiCallAction.remoteIpDetails.geoLocation.lon AS lon service.action.networkConnectionAction.remoteIpDetails.geoLocation.lon AS lon service.action.portProbeAction.portProbeDetails{}.remoteIpDetails.geoLocation.lon AS lon
FIELDALIAS-gd-resource-agg-user = resource.accessKeyDetails.userName as userName
FIELDALIAS-region = region as region
FIELDALIAS-gd-attacker-ip1 = service.action.awsApiCallAction.remoteIpDetails.ipAddressV4 AS src_ip
FIELDALIAS-gd-attacker-ip2 = service.action.networkConnectionAction.remoteIpDetails.ipAddressV4 AS src_ip
FIELDALIAS-gd-attacker-ip3 = service.action.portProbeAction.portProbeDetails{}.remoteIpDetails.ipAddressV4 AS src_ip
FIELDALIAS-gd-attacker-ip4 = service.action.awsApiCallAction.remoteIpDetails.ipAddressV4 AS src_ip
FIELDALIAS-raw_gd_type = type AS raw_gd_type

#fieldaliases to more easily work with API as needed
FIELDALIAS-accountid = accountId as aws_account_id
FIELDALIAS-detectorId = service.detectorId as detectorId
FIELDALIAS-findingType = type as finding_category
FIELDALIAS-findingId = id as findingId

# Common CIM
#GENERIC FIELDS THAT ARE COMMON, GET IT?!
# Changed to attacker_domain - standardizing on new definition of dest
FIELDALIAS-aob_gen_aws_cloudwatch_guardduty_alias_2 = resource.instanceDetails.networkInterfaces{}.privateDnsName AS attacker_domain
FIELDALIAS-aws-guardduty-body = description AS body
FIELDALIAS-aob_gen_aws_cloudwatch_guardduty_alias_7 = resource.instanceDetails.networkInterfaces{}.publicIp as dest_ip
FIELDALIAS-aob_gen_aws_cloudwatch_guardduty_alias_5 = resource.instanceDetails.networkInterfaces{}.vpcId AS dest_zone
FIELDALIAS-aws-guardduty-vendor_account = accountId as vendor_account
FIELDALIAS-aws-guardduty-vendor_region = region AS vendor_region

# Alerts CIM - https://docs.splunk.com/Documentation/CIM/4.20.0/User/Alerts
# the fields description, id are automatically mapped
# TAGS alert
#SEVERITY ID
FIELDALIAS-aws-guardduty-severity_id = severity AS severity_id
FIELDALIAS-gd-type-subj = type AS subject
FIELDALIAS-user = resource.accessKeyDetails.userName AS user

# Intrusion Detection CIM - https://docs.splunk.com/Documentation/CIM/4.20.0/User/IntrusionDetection
#TAGS ids, attack
#INCLUDES CLOUDTRAIL/API CALLS AND FLOW ANALYSIS FOR EC2
FIELDALIAS-gd-category = type AS category
# ODD FIELDS - categorizing outbound DNS request as "dest"
# Changed to outbound_attacker_domain - standardizing on new definition of dest
FIELDALIAS-gd-ec2-attacker-domain = service.action.dnsRequestAction.domain as outbound_attacker_domain
#NOTE THAT THIS IS THE INTERNAL IP OF THE AWS EC2 INSTANCE - YOU MAY NEED TO CONFIGURE THIS
#TO BETTER SUPPORT YOUR USE CASES
FIELDALIAS-aob_gen_aws_cloudwatch_guardduty_alias_3 = resource.instanceDetails.networkInterfaces{}.privateIpAddresses{}.privateIpAddress AS dest_ip_internal
# Changed to ct_user for standardizing on new definition of user
FIELDALIAS-ctuser =  resource.accessKeyDetails.userName AS ct_user

## Eval ##
##########
# non-CIM
EVAL-awsresource = coalesce('resource.instanceDetails.instanceId', 'resource.accessKeyDetails.userName')

# Common CIM
EVAL-app = "AWS GuardDuty"
#SEVERITY FOR ALERTS AND INTRUSION DETECTION
EVAL-severity = case(severity_id<4, "low", severity_id<7, "medium", severity_id<9, "high")

# Alerts CIM
EVAL-findingType = type
EVAL-src = case('service.resourceRole'="ACTOR", case('resource.resourceType'="Instance", 'resource.instanceDetails.instanceId', 'resource.resourceType'="AccessKey",\
            'resource.accessKeyDetails.principalId', 'resource.resourceType'="S3Bucket", coalesce('resource.s3BucketDetails{}.name', 'resource.s3BucketDetails{}.arn'), 1==1, ""),\
            'service.resourceRole'="TARGET", coalesce(case(match(description, "EC2 instance(?:.*?) communicating with IP address ((?:\d+.){3}(?:\d))"), instanceId), case(match(description, "EC2 instance(?:.*?) has attempted to communicate"), instanceId), case(match(description, "EC2 instance(?:.*?) remote host ((?:\d+.){3}(?:\d))"), instanceId), 'service.action.awsApiCallAction.remoteIpDetails.ipAddressV4', 'service.action.networkConnectionAction.remoteIpDetails.ipAddressV4',\
            'service.action.networkConnectionAction.localIpDetails.ipAddressV4','service.action.portProbeAction.portProbeDetails{}.remoteIpDetails.ipAddressV4'))
EVAL-src_name = case('service.resourceRole'="ACTOR" AND 'resource.resourceType'="AccessKey", 'resource.accessKeyDetails.userName',\
                match(description, "(EC2 instance(?:.*?) has attempted to communicate)|(EC2 instance(?:.*?) remote host ((?:\d+.){3}(?:\d)))|EC2 instance(?:.*?) communicating with IP address ((?:\d+.){3}(?:\d))|(EC2 instance(?:.*?) Denial of Service)"), instanceId)
EVAL-src_ip = if(match(description, "(EC2 instance(?:.*?) communicating with IP address ((?:\d+.){3}(?:\d)))|(EC2 instance(?:.*?) has attempted to communicate)|(EC2 instance(?:.*?) remote host ((?:\d+.){3}(?:\d)))|(Denial of Service)"), null(),\
                coalesce('service.action.awsApiCallAction.remoteIpDetails.ipAddressV4', 'service.action.networkConnectionAction.remoteIpDetails.ipAddressV4', 'service.action.networkConnectionAction.localIpDetails.ipAddressV4', 'service.action.portProbeAction.portProbeDetails{}.remoteIpDetails.ipAddressV4'))

# Aliased type above into raw_gd_type
EVAL-signature = if(severity_id < 8 AND subject!="UnauthorizedAccess:EC2/SSHBruteForce", title, subject)
EVAL-signature_id = if(severity_id < 8 AND subject!="UnauthorizedAccess:EC2/SSHBruteForce", subject, detectorId)
EVAL-type = if(severity_id < 5, "alert", "alarm")
EVAL-user_name = if('resource.resourceType'="AccessKey", 'resource.accessKeyDetails.userName', null())
EVAL-vendor_product = "AWS GuardDuty"

# Intrusion Detection CIM
#TAGS ids, attack
#INCLUDES CLOUDTRAIL/API CALLS AND FLOW ANALYSIS FOR EC2
EVAL-dvc = "AWS GuardDuty"
EVAL-ids_type = "network"
#NOTE THAT THIS IS THE INTERNAL IP OF THE AWS EC2 INSTANCE - YOU MAY NEED TO CONFIGURE THIS
#TO BETTER SUPPORT YOUR USE CASES
# Changed to src_intrusion for standardizing on new definition of src
EVAL-src_intrusion = coalesce(src_ip,src)
EVAL-transport = "tcp"

# The extractions of the below fields are applicable to Alerts and Intrusion Detection DM.
EVAL-action = case('service.action.dnsRequestAction.blocked'=="true", "blocked", 'service.action.networkConnectionAction.blocked'=="true", "blocked", 'service.action.portProbeAction.blocked'=="true", "blocked", true(), "allowed")
EVAL-dest_port = case(match(description, "(EC2 instance(?:.*?) is communicating with IP address ((?:\d+.){3}(?:\d)))|(EC2 instance(?:.*?) has attempted to communicate)|(EC2 instance(?:.*?) remote host ((?:\d+.){3}(?:\d)))|(EC2 instance(?:.*?) Denial of Service)"), 'service.action.networkConnectionAction.remotePortDetails.port',\
                    true(), 'service.action.networkConnectionAction.localPortDetails.port')
EVAL-dest = case(mvcount(aws_count)==1, replace(affectedResources, "\"AWS::(?:[^\"]*)\"\s*:\s*\"[^\"]*((?<=role\/|\")[^\"]*)\"", "\1"),\
            match(description, "(S3 bucket)|(Impact:S3/)|(Amazon S3)"), coalesce(AWS__S3__Bucket, AWS__EC2__Instance, instanceId, accountId),\
            match(description, "AWS CloudTrail trail"), coalesce(AWS__CloudTrail__Trail, accountId),\
            match(description, "Principal AssumedRole"), replace(description, ".*Principal AssumedRole\s*:\s*([^\s]+).*", "\1"),\
            match(description, "Principal IAMUser:"), coalesce(AWS__IAM__User, instanceId, accountId),\
            match(description, "(Denial of Service) | (DoS)"), 'service.action.networkConnectionAction.remoteIpDetails.ipAddressV4',\
            match(description, "remote host ((?:\d+.){3}(?:\d))"), replace(description, ".*remote host ((?:\d+.){3}(?:\d)).*", "\1"),\
            match(description, "communicating with(?:.*?) IP address ((?:\d+.){3}(?:\d))"), replace(description, ".*communicating with(?:.*?) IP address ((?:\d+.){3}(?:\d)).*", "\1"),\
            match(description, "Credentials created(?:.*?) role "), replace(description, ".*Credentials created(?:.*?) role ([^\s]+).*", "\1"),\
            match(description, "EC2 instance(?:.*?) has attempted to communicate"), null(),\
            match(description, instanceId), instanceId,\
            true(), coalesce(instanceId, accountId))
EVAL-dest_ip = case(match(description, "remote host ((?:\d+.){3}(?:\d))"), replace(description, ".*remote host ((?:\d+.){3}(?:\d)).*", "\1"),\
                match(description, "communicating with(?:.*?) IP address ((?:\d+.){3}(?:\d))"), replace(description, ".*communicating with(?:.*?) IP address ((?:\d+.){3}(?:\d)).*", "\1"),\
                match(description, "(Denial of Service)|(DoS)"), 'service.action.networkConnectionAction.remoteIpDetails.ipAddressV4')
EVAL-dest_name = case(mvcount(aws_count)==1, replace(affectedResources, "\"AWS::(?:[^\"]*)\"\s*:\s*\"[^\"]*((?<=role\/|\")[^\"]*)\"", "\1"),\
                match(description, "(S3 bucket)|(Impact:S3/)|(Amazon S3)"), coalesce(AWS__S3__Bucket, AWS__EC2__Instance, instanceId, accountId),\
                match(description, "AWS CloudTrail trail"), coalesce(AWS__CloudTrail__Trail, accountId),\
                match(description, "Principal AssumedRole"), replace(description, ".*Principal AssumedRole\s*:\s*([^\s]+).*", "\1"),\
                match(description, "Principal IAMUser:"), coalesce(AWS__IAM__User, instanceId, accountId),\
                match(description, "(Denial of Service) | (DoS)"), 'service.action.networkConnectionAction.remoteIpDetails.ipAddressV4',\
                match(description, "remote host ((?:\d+.){3}(?:\d))"), null(),\
                match(description, "communicating with(?:.*?) IP address ((?:\d+.){3}(?:\d))"), null(),\
                match(description, "Credentials created(?:.*?) role "), replace(description, ".*Credentials created(?:.*?) role ([^\s]+).*", "\1"),\
                match(description, "EC2 instance(?:.*?) has attempted to communicate"), null(),\
                match(description, instanceId), instanceId,\
                true(), coalesce(instanceId, accountId))
EVAL-dest_type = case(match(description, "(S3 bucket)|(Impact:S3/)|(Amazon S3)|(S3 Bucket)"), "S3Bucket",\
                match(description, "AWS CloudTrail trail"), "CloudTrail Trail",\
                match(description, "Principal AssumedRole"), "Role",\
                match(description, "Principal IAMUser:"), "user",\
                match(description, "remote host ((?:\d+.){3}(?:\d))"), null(),\
                mvcount(aws_count)==1, replace(affectedResources, "\"AWS::(?:[^\"]*)\"\s*:\s*\"[^\"]*((?<=role\/|\")[^\"]*)\"", "\1"),\
                match(description, instanceId), "instance", instanceId!="" or isnotnull(instanceId), "instance",\
                true(), "AwsAccount")
EVAL-src_port = case(match(description, "(EC2 instance(?:.*?) is communicating with IP address ((?:\d+.){3}(?:\d)))|(EC2 instance(?:.*?) has attempted to communicate)|(EC2 instance(?:.*?) remote host ((?:\d+.){3}(?:\d)))|(EC2 instance(?:.*?) Denial of Service)"), 'service.action.networkConnectionAction.localPortDetails.port',\
                true(), 'service.action.networkConnectionAction.remotePortDetails.port')

## Lookups ##
#############
# non-CIM
LOOKUP-guardduty-category = aws_category subject OUTPUT category
LOOKUP-guardduty-resource-type = aws_gd_finding_types finding_category OUTPUTNEW resource_type

# Alerts CIM
LOOKUP-guardduty-mitre_technique_id = aws_gd_mitre_technique_id_lookup signature_id AS subject OUTPUTNEW mitre_technique_id
LOOKUP-guardduty-src-dest-type = aws-gd-resourceType_lookup resource_type AS resource.resourceType, resource_role AS service.resourceRole OUTPUTNEW src_type
