{"version":3,"file":"MetricsConfigurationView.js","sources":["../../../../../../../build-ui/js/dependencies/DimensionMetricsPanel.js","../../../../../../../build-ui/js/dependencies/NamespaceListPanel.js","../../../../../../../build-ui/js/dependencies/MetricsConfigurationAdvancedView.js","../../../../../../../build-ui/js/dependencies/MetricsConfigurationRow.js","../../../../../../../build-ui/js/MetricsConfigurationView.js"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport $ from 'jquery'\nimport { template, each, union, keys, clone, without, difference } from 'underscore'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport Multiselect from '@splunk/react-ui/Multiselect'\nimport Text from '@splunk/react-ui/Text'\nimport DimensionMetricsPanelTemplate from '../../html/DimensionMetricsPanelTemplate.html'\nimport { SplunkThemeProvider } from '@splunk/themes'\nimport { ThemeProviderSettings } from '../styles/Theme'\n\nconst ALL_VALUE = '.*'\n\nclass DimensionMetricsPanel {\n  constructor (options) {\n    this.defaultDimensions = options.defaultDimensions\n    this.defaultMetrics = options.defaultMetrics\n    this.defaultStatistics = options.defaultStatistics\n    this.model = options.model\n    this.selectedModel = options.selectedModel\n    this.el = $('#dimension-list-section')\n  }\n\n  _handleDimensionsChange (e, { value }, index) {\n    const jsonValue = this._parseDimension(value)\n    if (!jsonValue) {\n      $(e.target).parent().addClass('json-err-state')\n      $(e.target).parent().attr('data-namespace', this.selectedModel.metric_namespace)\n      $(e.target).addClass('json-err-state')\n    } else {\n      $(e.target).parent().removeClass('json-err-state')\n      $(e.target).parent().removeAttr('data-namespace')\n      $(e.target).removeClass('json-err-state')\n      this.selectedModel.metric_dimensions_list[index] = jsonValue\n      const namespace = this.selectedModel.metric_namespace\n      $(`.namespace-cell[data-namespace=\"${namespace}\"]`).addClass('namespace-edited-marker')\n      if (!this.selectedModel.change_set.includes('metric_dimensions_list')) {\n        this.selectedModel.change_set.push('metric_dimensions_list')\n      }\n    }\n  }\n\n  _handleMetricsChange (e, { values }, index) {\n    this.selectedModel.metric_names_list[index] = this._handleAllOption(values)\n    const namespace = this.selectedModel.metric_namespace\n    $(`.namespace-cell[data-namespace=\"${namespace}\"]`).addClass('namespace-edited-marker')\n    if (!this.selectedModel.change_set.includes('metric_names_list')) {\n      this.selectedModel.change_set.push('metric_names_list')\n    }\n    $('[data-test=\"layer-container\"] [data-test=\"layer\"]>div').remove()\n    this.render()\n  }\n\n  _handleStatisticsChange (e, { values }, index) {\n    this.selectedModel.statistics_list[index] = values\n    const namespace = this.selectedModel.metric_namespace\n    $(`.namespace-cell[data-namespace=\"${namespace}\"]`).addClass('namespace-edited-marker')\n  }\n\n  _addMetrics () {\n    this.selectedModel.metric_dimensions_list.push([])\n    this.selectedModel.metric_names_list.push([])\n    this.selectedModel.statistics_list.push([])\n    const namespace = this.selectedModel.metric_namespace\n    $(`.namespace-cell[data-namespace=\"${namespace}\"]`).addClass('namespace-edited-marker')\n    this._updateChangeSet()\n    this.render()\n  }\n\n  _removeMetrics (e) {\n    const index = parseInt($(e.target).data('index'))\n    this.selectedModel.metric_dimensions_list.splice(index, 1)\n    this.selectedModel.metric_names_list.splice(index, 1)\n    this.selectedModel.statistics_list.splice(index, 1)\n    const namespace = this.selectedModel.metric_namespace\n    $(`.namespace-cell[data-namespace=\"${namespace}\"]`).addClass('namespace-edited-marker')\n    this._updateChangeSet()\n    this.render()\n  }\n\n  _resetMetrics () {\n    const namespace = this.selectedModel.metric_namespace\n    const defaultDimensionList = clone(this.defaultDimensions[namespace])\n    const defaultMetricNameList = []\n    const defaultStatisticsList = []\n    if (defaultDimensionList) {\n      defaultDimensionList.forEach(() => {\n        defaultMetricNameList.push(['.*'])\n        defaultStatisticsList.push(this.defaultStatistics)\n      })\n      this.selectedModel.metric_dimensions_list = JSON.parse(JSON.stringify(defaultDimensionList))\n      this.selectedModel.metric_names_list = JSON.parse(JSON.stringify(defaultMetricNameList))\n      this.selectedModel.statistics_list = JSON.parse(JSON.stringify(defaultStatisticsList))\n      this.selectedModel.change_set = []\n      const namespace = this.selectedModel.metric_namespace\n      $(`.namespace-cell[data-namespace=\"${namespace}\"]`).removeClass('namespace-edited-marker')\n      this.render()\n    }\n  }\n\n  _updateChangeSet () {\n    if (!this.selectedModel.change_set.includes('metric_names_list')) {\n      this.selectedModel.change_set.push('metric_names_list')\n    }\n    if (!this.selectedModel.change_set.includes('metric_dimensions_list')) {\n      this.selectedModel.change_set.push('metric_dimensions_list')\n    }\n  }\n\n  _parseDimension (jsonString) {\n    try {\n      const dimensionList = JSON.parse(jsonString)\n      for (let i = 1; i < dimensionList.length; i++) {\n        const previousKeys = keys(dimensionList[i - 1])\n        const currentKeys = keys(dimensionList[i])\n\n        if (difference(previousKeys, currentKeys).length > 0) {\n          return false\n        }\n      }\n      return dimensionList\n    } catch (e) {}\n    return false\n  }\n\n  _handleAllOption (value, el) {\n    if (value.length > 0 && value.indexOf(ALL_VALUE) !== -1) {\n      if (value[value.length - 1] === ALL_VALUE) {\n        value = [ALL_VALUE]\n      } else {\n        value = without(value, ALL_VALUE)\n      }\n    }\n    return value\n  }\n\n  render () {\n    if (this.selectedModel.metric_namespace) {\n      const selectedDimensions = this.selectedModel.metric_dimensions_list\n      const selectedMetrics = this.selectedModel.metric_names_list\n      const selectedStatistics = this.selectedModel.statistics_list\n      const selectedNamespace = this.selectedModel.metric_namespace\n      const dimensionList = []\n      for (let i = 0; i < selectedDimensions.length; i++) {\n        let dimensionKeys = []\n        each(selectedDimensions[i], (item) => {\n          dimensionKeys = union(dimensionKeys, keys(item))\n        })\n        dimensionList.push({\n          dimensionTitle: dimensionKeys.join(', '),\n          dimensionValue: JSON.stringify(selectedDimensions[i])\n        })\n      }\n      this.el.html(\n        template(DimensionMetricsPanelTemplate)({\n          dimensionList: dimensionList\n        })\n      )\n      each($('.dimensions-value'), (element, index) => {\n        ReactDOM.render(\n          <SplunkThemeProvider {...ThemeProviderSettings}>\n            <Text\n              multiline\n              defaultValue={dimensionList[index].dimensionValue}\n              onChange={(e, { value }) => this._handleDimensionsChange(e, { value }, index)}\n            />\n          </SplunkThemeProvider>,\n          element\n        )\n      })\n      each($('.metrics-value'), (element, index) => {\n        let options = this.defaultMetrics[selectedNamespace]\n        if (!options) {\n          options = []\n        }\n        const optionsList = options.map((item) => <Multiselect.Option key={item} label={item} value={item} />)\n        optionsList.push(<Multiselect.Option label='All' value='.*' />)\n        ReactDOM.render(\n          <SplunkThemeProvider {...ThemeProviderSettings}>\n            <Multiselect\n              allowNewValues\n              tabConfirmsNewValue\n              defaultValues={selectedMetrics[index]}\n              onChange={(e, { values }) => this._handleMetricsChange(e, { values }, index)}\n            >\n              {optionsList}\n            </Multiselect>\n          </SplunkThemeProvider>,\n          element\n        )\n      })\n\n      each($('.statistics-value'), (element, index) => {\n        const options = this.defaultStatistics\n        ReactDOM.render(\n          <SplunkThemeProvider {...ThemeProviderSettings}>\n            <Multiselect\n              allowNewValues\n              tabConfirmsNewValue\n              defaultValues={selectedStatistics[index]}\n              onChange={(e, { values }) => this._handleStatisticsChange(e, { values }, index)}\n            >\n              {options.map((item) => (\n                <Multiselect.Option key={item} label={item} value={item} />\n              ))}\n            </Multiselect>\n          </SplunkThemeProvider>,\n          element\n        )\n      })\n      for (const button of $('.metrics-remove-button')) {\n        $(button).on('click', (e) => { this._removeMetrics(e) })\n      }\n      $('#metrics-reset-button').on('click', () => { this._resetMetrics() })\n      $('#metrics-add-button').on('click', () => { this._addMetrics() })\n    } else {\n      this.el.empty()\n    }\n  }\n}\n\nexport default DimensionMetricsPanel\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport $ from 'jquery'\nimport { template, map, difference, findWhere, clone } from 'underscore'\nimport ReactDOM from 'react-dom'\nimport React from 'react'\nimport ComboBox from '@splunk/react-ui/ComboBox'\nimport NamespaceListTemplate from '../../html/NamespaceListTemplate.html'\nimport DimensionMetricsPanel from './DimensionMetricsPanel.js'\nimport { SplunkThemeProvider } from '@splunk/themes'\nimport { ThemeProviderSettings } from '../styles/Theme'\n\nconst ENTER_KEY = 13\n\nclass NamespaceListPanel {\n  constructor (options) {\n    this.el = $('#namespace-list-section')\n    this.model = options.model\n    this.selectedModel = options.selectedModel\n    this.defaultNamespaces = options.defaultNamespaces\n    this.defaultDimensions = options.defaultDimensions\n    this.defaultMetrics = options.defaultMetrics\n    this.defaultStatistics = options.defaultStatistics\n    this.editMarks = []\n  }\n\n  render () {\n    const namespaces = map(this.model, (item) => item.metric_namespace)\n    this.el.html(\n      template(NamespaceListTemplate)({\n        namespaces: namespaces\n      })\n    )\n    const remainingNamespaces = difference(this.defaultNamespaces, namespaces).sort()\n    ReactDOM.render(\n      <SplunkThemeProvider {...ThemeProviderSettings}>\n        <ComboBox\n          inline\n          onBlur={(e) => { this._addNewNamespace(e) }}\n          onKeyDown={(e) => { this._handleKeyPress(e) }}\n        >\n          {remainingNamespaces.map((item) => (\n            <ComboBox.Option key={item} value={item} />\n          ))}\n        </ComboBox>\n      </SplunkThemeProvider>,\n      document.getElementById('namespace-value')\n    )\n    for (const namespaceLabel of $('.namespace-cell:not(#namespace-add-cell)')) {\n      $(namespaceLabel).on('click', (e) => { this._selectNamespace(e) })\n    }\n    for (const button of $('.namespace-remove-button')) {\n      $(button).on('click', (e) => { this._removeNamespace(e) })\n    }\n    $('#namespace-add-button').on('click', (e) => { this._onClickAddNamespace() })\n    $('#namespace-add-cancel-button').on('click', (e) => { this._onClickCancelNamespace() })\n    this._renderEditMarks()\n    this._addSelected()\n  }\n\n  _onClickAddNamespace () {\n    $('#namespace-add-cell').show()\n    $('#namespace-value>div>div').remove()\n    $('#namespace-value').trigger('focus')\n  }\n\n  _onClickCancelNamespace () {\n    $('#namespace-value').val('').removeClass('validate-error')\n    $('#namespace-add-cell').hide()\n    $('#namespace-add-error').hide()\n  }\n\n  _selectNamespace (event) {\n    const selectedNamespace = $(event.target).data('namespace')\n    const findModel = findWhere(this.model, { metric_namespace: selectedNamespace })\n    if (findModel) {\n      this.selectedModel = findModel\n    }\n    this._addSelected()\n  }\n\n  _addSelected () {\n    $('.namespace-cell').removeClass('selected')\n    const namespace = this.selectedModel.metric_namespace\n    $(`.namespace-cell[data-namespace=\"${namespace}\"]`).addClass('selected')\n    this._renderDimension()\n  }\n\n  _addNewNamespace (e) {\n    const newNamespace = e.target.value.trim()\n    const existedNamespaces = map(this.model, function (item) {\n      return item.metric_namespace\n    })\n    if (newNamespace === '') {\n      $('#namespace-add-error').text('Namespace value cannot be empty.').show()\n      $(e.currentTarget).addClass('validate-error')\n    } else if (existedNamespaces.indexOf(newNamespace) === -1) {\n      let newModel = {}\n      if (this.defaultNamespaces.indexOf(newNamespace) === -1) {\n        newModel = {\n          metric_namespace: newNamespace,\n          metric_dimensions_list: [],\n          metric_names_list: [],\n          statistics_list: [],\n          change_set: []\n        }\n      } else {\n        const metricNamesList = []\n        const statisticsList = []\n        const dimensionList = clone(this.defaultDimensions[newNamespace])\n        for (let i = 0; i < dimensionList.length; i++) {\n          metricNamesList.push(['.*'])\n          statisticsList.push(this.defaultStatistics)\n        }\n        newModel = {\n          metric_namespace: newNamespace,\n          metric_dimensions_list: dimensionList,\n          metric_names_list: metricNamesList,\n          statistics_list: statisticsList,\n          change_set: []\n        }\n      }\n      this.model.push(newModel)\n      this.selectedModel = newModel\n      this._modifyEditMark()\n      this.editMarks.push(this.selectedModel.metric_namespace)\n      this.render()\n    } else {\n      $('#namespace-add-error').text('This namespace is already existed.').show()\n      $(e.target).addClass('validate-error')\n    }\n  }\n\n  _removeNamespace (e) {\n    e.stopPropagation()\n    const removedModel = findWhere(this.model, { metric_namespace: $(e.target).data('namespace') })\n    if (removedModel) {\n      const index = this.model.indexOf(removedModel)\n      if (index > -1) { this.model.splice(index, 1) }\n    }\n    this._modifyEditMark()\n    this.render()\n    const lastIndex = this.model.length - 1\n    if (lastIndex > -1) {\n      this.selectedModel = this.model[lastIndex]\n      this._addSelected()\n    }\n  }\n\n  _renderDimension () {\n    const dimensionMetricsPanel = new DimensionMetricsPanel({\n      model: this.model,\n      selectedModel: this.selectedModel,\n      defaultDimensions: this.defaultDimensions,\n      defaultMetrics: this.defaultMetrics,\n      defaultStatistics: this.defaultStatistics\n    })\n    dimensionMetricsPanel.render()\n  }\n\n  _handleKeyPress (e) {\n    if (e.which === ENTER_KEY) {\n      $('#namespace-add-error').text('Press <TAB> key to add the selected namespace').show()\n    }\n  }\n\n  _modifyEditMark () {\n    this.editMarks = []\n    for (const namespace of $('div.namespace-edited-marker')) {\n      this.editMarks.push($(namespace).attr('data-namespace'))\n    }\n  }\n\n  _renderEditMarks () {\n    for (const namespace of this.editMarks) {\n      $(`.namespace-cell[data-namespace=\"${namespace}\"]`).addClass('namespace-edited-marker')\n    }\n  }\n}\n\nexport default NamespaceListPanel\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport $ from 'jquery'\nimport { template, some, isEqual } from 'underscore'\nimport NamespaceListPanel from './NamespaceListPanel.js'\nimport AdvancedMetricsConfigurationTemplate from '../../html/AdvancedMetricsConfigurationTemplate.html'\nimport '../../stylesheets/UCC_stylesheet.css'\nimport '../../stylesheets/MetricsConfigurationAdvancedView.css'\n\nclass MetricsConfigurationAdvancedView {\n  constructor (options) {\n    this.model = options.model\n    this.defaultDimensions = options.defaultDimensions\n    this.defaultMetrics = options.defaultMetrics\n    this.defaultStatistics = options.defaultStatistics\n    this.defaultNamespaces = options.defaultNamespaces\n    this.selectedModel = this.model[0]\n  }\n\n  render () {\n    const standardView = $('div[role=\"main\"] > div > div[data-test=\"column-layout\"] > div')\n    standardView.hide()\n    const AdvanceViewTemplate = template(AdvancedMetricsConfigurationTemplate)\n    $('div[role=\"main\"] > div > div').append(AdvanceViewTemplate)\n    this._renderNamespaces()\n    $('#metrics-cancel').on('click', () => this._cancelModifications())\n  }\n\n  _renderNamespaces () {\n    this.namespaceListPanel = new NamespaceListPanel({\n      model: this.model,\n      selectedModel: this.selectedModel,\n      defaultNamespaces: this.defaultNamespaces,\n      defaultDimensions: this.defaultDimensions,\n      defaultMetrics: this.defaultMetrics,\n      defaultStatistics: this.defaultStatistics\n    })\n    this.namespaceListPanel.render()\n  }\n\n  _cancelModifications () {\n    $(window).off('resize')\n    $('.advanced-metric-configuration').remove()\n    $('div[role=\"main\"] > div > div[data-test=\"column-layout\"] > div').css('display', 'flex')\n  }\n\n  _validateModel () {\n    $('.namespace-cell[data-namespace]').removeClass('validate-error')\n    if (!this.model.length) {\n      return 'Metric configurations must have at least one namespace with appropriate metric, dimensions and statstics value. Please check.'\n    }\n    for (const attrs of this.model) {\n      const namespace = attrs.metric_namespace\n      if ($('.json-err-state').length) {\n        const errNamespace = $('.json-err-state').attr('data-namespace')\n        $(`.namespace-cell[data-namespace=\"${errNamespace}\"]`).addClass('validate-error')\n        return (\n          'The metric dimension value of ' +\n                    errNamespace +\n                    ' should be a JSON array, of which elements should have same keys. Please check.'\n        )\n      } else if (this._containsEmptyItem(attrs.metric_dimensions_list)) {\n        $(`.namespace-cell[data-namespace=\"${namespace}\"]`).addClass('validate-error')\n        return 'The metric dimension value of \"' + attrs.metric_namespace + '\" is empty. Please check.'\n      } else if (this._containsEmptyItem(attrs.metric_names_list)) {\n        $(`.namespace-cell[data-namespace=\"${namespace}\"]`).addClass('validate-error')\n        return 'The metric name of \"' + attrs.metric_namespace + '\" is empty. Please check.'\n      } else if (this._containsEmptyItem(attrs.statistics_list)) {\n        $(`.namespace-cell[data-namespace=\"${namespace}\"]`).addClass('validate-error')\n        return 'The metric statistics of \"' + attrs.metric_namespace + '\" is empty. Please check.'\n      }\n    }\n  }\n\n  _containsEmptyItem (twoDimensionArray) {\n    if (twoDimensionArray.length === 0) {\n      return true\n    }\n    return some(twoDimensionArray, (ele) => {\n      return isEqual(ele, []) || isEqual(ele, [''])\n    })\n  }\n}\n\nexport default MetricsConfigurationAdvancedView\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport { difference, each, keys, template, union } from 'underscore'\nimport MetricsConfigurationRowTemplate from '../../html/MetricsConfigurationRowTemplate.html'\nimport $ from 'jquery'\n\nclass MetricsConfigurationRow {\n  constructor (options) {\n    this.model = options.model\n    this.defaultDimensions = options.defaultDimensions\n    this.defaultMetrics = options.defaultMetrics\n    this.el = $('#metrics-configuration-table > tbody')\n  }\n\n  render () {\n    const dimensionField = this.model.metric_dimensions_list\n    const metricField = this.model.metric_names_list\n    let dimensionKeyList = []\n    let metricKeyList = []\n    let defaultDimensionKeyList = []\n\n    each(metricField, (metricItem) => {\n      metricKeyList = union(metricKeyList, metricItem)\n    })\n\n    each(dimensionField, (dimensionValue) => {\n      each(dimensionValue, (dimensionItem) => {\n        dimensionKeyList = union(dimensionKeyList, keys(dimensionItem))\n      })\n    })\n\n    each(this.defaultDimensions, (dimensionValue) => {\n      each(dimensionValue, (dimensionItem) => {\n        defaultDimensionKeyList = union(defaultDimensionKeyList, keys(dimensionItem))\n      })\n    })\n\n    const MetricRowTemplate = template(MetricsConfigurationRowTemplate)({\n      service: this.model.metric_namespace,\n      metrics: this._restrictStringLength(\n        metricKeyList.indexOf('.*') !== -1 ||\n                    (this.defaultMetrics && difference(this.defaultMetrics, metricKeyList).length === 0)\n          ? 'All'\n          : metricKeyList.join(', ')\n      ),\n      dimensions: this._restrictStringLength(\n        defaultDimensionKeyList.length > 0 && difference(defaultDimensionKeyList, dimensionKeyList).length === 0\n          ? 'All'\n          : dimensionKeyList.join(', ')\n      ),\n      isMetricsModified: this.model.change_set.includes('metric_names_list'),\n      isDimensionModified: this.model.change_set.includes('metric_dimensions_list')\n    })\n    this.el.append(MetricRowTemplate)\n  }\n\n  _restrictStringLength (text) {\n    return text.length > 50 ? text.substring(0, 48) + '...' : text\n  }\n}\n\nexport default MetricsConfigurationRow\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport $, { Deferred } from 'jquery'\nimport { template, each, map, isUndefined, sortBy, clone, keys, isEqual } from 'underscore'\nimport { createRESTURL } from '@splunk/splunk-utils/url'\nimport MetricsConfigurationAdvancedView from './dependencies/MetricsConfigurationAdvancedView'\nimport MetricsConfigurationRow from './dependencies/MetricsConfigurationRow'\nimport MetricsConfigurationTemplate from '../html/MetricsConfigurationTemplate.html'\nimport '../stylesheets/MetricsConfigurationView.css'\n\nconst APP_NAME = 'Splunk_TA_aws'\nconst ALL_VALUE = '.*'\nclass MetricsConfigurationView {\n  /**\n     *\n     * @constructor\n     * @param {Object} globalConfig - Global configuration.\n     * @param {element} el - The element of the custom row.\n     * @param {string} data - Service name.\n     * @param {object} util - the utility object\n     * @param {function} setValue - set value of the custom field\n     */\n  constructor (globalConfig, el, data, setValue, util) {\n    this.globalConfig = globalConfig\n    this.el = el\n    this.data = data\n    this.util = util\n    this.setValue = setValue\n    this.mainModel = {}\n    this.cachedChangeSet = {}\n\n    this._loadDefaultSettings().done(() => {\n      this._generateViewModel()\n      this.render()\n      this._updateModel()\n    })\n  }\n\n  render () {\n    this.el.innerHTML = template(MetricsConfigurationTemplate)({ count: this.mainModel.length })\n    this._renderRows()\n    this.el.querySelector('#metrics-configuration-advanced-setting').addEventListener('click', (event) => {\n      this._goAdvancedSetting()\n    })\n    return this\n  }\n\n  _loadSelectedNameSpace (e) {\n    const namespace = $(e.target).data('service')\n    this._goAdvancedSetting()\n    $(`.namespace-cell[data-namespace='${namespace}']`).trigger('click')\n  }\n\n  _loadDefaultSettings () {\n    const dfd = Deferred()\n    const contextURL = createRESTURL('splunk_ta_aws/splunk_ta_aws_cloudwatch_default_settings', {\n      app: APP_NAME,\n      sharing: 'app'\n    })\n    fetch(contextURL + '?output_mode=json') /* global fetch:false */\n      .then((response) => response.json())\n      .then((cloudwatchSettings) => {\n        const { dimensions, metrics, statistics, namespaces } = cloudwatchSettings.entry[0].content\n\n        const responseDimensions = JSON.parse(dimensions)\n\n        for (const service in responseDimensions) {\n          const dimensionArr = map(responseDimensions[service], (dimensionItem) => [dimensionItem])\n          responseDimensions[service] = dimensionArr\n        }\n\n        this.defaultDimensions = responseDimensions\n        this.defaultMetrics = JSON.parse(metrics)\n        this.defaultStatistics = JSON.parse(statistics)\n        this.defaultNamespaces = JSON.parse(namespaces)\n        dfd.resolve()\n      })\n\n    return dfd\n  }\n\n  _generateViewModel () {\n    let namespaces = this.data.value\n    let models = []\n    if (namespaces === null) {\n      models = map(this.defaultNamespaces, (namespace) => {\n        const metricNamesList = []\n        const statisticsList = []\n        const dimensionList = clone(this.defaultDimensions[namespace])\n\n        for (let i = 0; i < dimensionList.length; i++) {\n          metricNamesList.push([ALL_VALUE])\n          statisticsList.push(this.defaultStatistics)\n        }\n        return {\n          metric_namespace: namespace,\n          metric_dimensions_list: dimensionList,\n          metric_names_list: metricNamesList,\n          statistics_list: statisticsList,\n          change_set: this.cachedChangeSet[namespace] || []\n        }\n      })\n    } else {\n      namespaces = JSON.parse(namespaces)\n      let metricDimensions = ''\n      let metricNames = ''\n      let statistics = ''\n      const serviceMark = {}\n      this.util.setState((prevState) => {\n        const data = { ...prevState.data }\n        metricDimensions = JSON.parse(data.metric_dimensions.value)\n        metricNames = JSON.parse(data.metric_names.value)\n        statistics = JSON.parse(data.statistics.value)\n        return { data }\n      })\n\n      for (let i = 0; i < namespaces.length; i++) {\n        const namespace = namespaces[i]\n        let metricNameField = JSON.parse(metricNames[i])\n        if (metricNameField === ALL_VALUE) {\n          metricNameField = [ALL_VALUE]\n        }\n        if (isUndefined(serviceMark[namespace])) {\n          models.push({\n            metric_namespace: namespace,\n            metric_dimensions_list: [JSON.parse(metricDimensions[i])],\n            metric_names_list: [metricNameField],\n            statistics_list: [JSON.parse(statistics[i])],\n            change_set: this.cachedChangeSet[namespace] || []\n          })\n          serviceMark[namespace] = models.length - 1\n        } else {\n          const model = models[serviceMark[namespace]]\n          model.metric_dimensions_list.push(JSON.parse(metricDimensions[i]))\n          model.metric_names_list.push(metricNameField)\n          model.statistics_list.push(JSON.parse(statistics[i]))\n        }\n      }\n    }\n    models = sortBy(models, (model) => model.metric_namespace)\n    this.mainModel = models\n  }\n\n  _renderRows () {\n    each(this.mainModel, (model) => {\n      const rowPanel = new MetricsConfigurationRow({\n        model: model,\n        defaultDimensions: this.defaultDimensions[model.metric_namespace],\n        defaultMetrics: this.defaultMetrics[model.metric_namespace]\n      })\n      rowPanel.render()\n    })\n    $('.configuration-modified-mark').on('click', (e) => {\n      this._loadSelectedNameSpace(e)\n    })\n  }\n\n  _updateModel () {\n    const namespaceField = []\n    const dimensionField = []\n    const metricField = []\n    const statisticsField = []\n    each(this.mainModel, (model) => {\n      const namespace = model.metric_namespace\n      const dimensionsList = model.metric_dimensions_list\n      const metricsList = model.metric_names_list\n      const statisticsList = model.statistics_list\n\n      for (let i = 0; i < dimensionsList.length; i++) {\n        namespaceField.push(namespace)\n        dimensionField.push(JSON.stringify(dimensionsList[i]))\n\n        // special handling for metric_names, \".*\" should be a string value, not an array\n        if (isEqual(metricsList[i], [ALL_VALUE])) {\n          metricField.push('\"' + ALL_VALUE + '\"')\n        } else {\n          metricField.push(JSON.stringify(metricsList[i]))\n        }\n\n        statisticsField.push(JSON.stringify(statisticsList[i]))\n      }\n\n      this.cachedChangeSet[namespace] = model.change_set\n    })\n    this.util.setState((prevState) => {\n      const data = { ...prevState.data }\n      data.metric_namespace.value = JSON.stringify(namespaceField)\n      data.metric_dimensions.value = JSON.stringify(dimensionField)\n      data.metric_names.value = JSON.stringify(metricField)\n      data.statistics.value = JSON.stringify(statisticsField)\n      return { data }\n    })\n  }\n\n  _goAdvancedSetting () {\n    this.tempModel = JSON.parse(JSON.stringify(this.mainModel))\n    this.advancedView = new MetricsConfigurationAdvancedView({\n      model: this.tempModel,\n      defaultDimensions: this.defaultDimensions,\n      defaultMetrics: this.defaultMetrics,\n      defaultStatistics: this.defaultStatistics,\n      defaultNamespaces: keys(this.defaultDimensions)\n    })\n    this.advancedView.render()\n    $('#metrics-save').on('click', () => this._updateModifications())\n  }\n\n  _updateModifications () {\n    const errMessage = this.advancedView._validateModel()\n    if (!errMessage) {\n      $(window).off('resize')\n      $('.advanced-metric-configuration').remove()\n      $('div[role=\"main\"] > div > div[data-test=\"column-layout\"] > div').css('display', 'flex')\n      this.mainModel = JSON.parse(JSON.stringify(this.tempModel))\n      this.render()\n      this._updateModel()\n    } else {\n      $('#error-message').text(errMessage)\n      $('#advanced-submit-error-msg').show()\n    }\n  }\n}\n\nexport default MetricsConfigurationView\n"],"names":["DimensionMetricsPanel","options","defaultDimensions","defaultMetrics","defaultStatistics","model","selectedModel","el","$","e","index","value","jsonValue","this","_parseDimension","target","parent","removeClass","removeAttr","metric_dimensions_list","namespace","metric_namespace","addClass","change_set","includes","push","attr","values","metric_names_list","_handleAllOption","remove","render","statistics_list","_updateChangeSet","parseInt","data","splice","defaultDimensionList","clone","defaultMetricNameList","defaultStatisticsList","forEach","_this","JSON","parse","stringify","jsonString","dimensionList","i","length","previousKeys","keys","currentKeys","difference","indexOf","without","selectedDimensions","selectedMetrics","selectedStatistics","selectedNamespace","dimensionKeys","each","item","union","dimensionTitle","join","dimensionValue","html","template","element","ReactDOM","React","SplunkThemeProvider","ThemeProviderSettings","Text","multiline","defaultValue","onChange","_this2","_handleDimensionsChange","optionsList","map","Multiselect","Option","key","label","allowNewValues","tabConfirmsNewValue","defaultValues","_handleMetricsChange","_handleStatisticsChange","button","on","_removeMetrics","_resetMetrics","_addMetrics","empty","NamespaceListPanel","defaultNamespaces","editMarks","namespaces","remainingNamespaces","sort","ComboBox","inline","onBlur","_addNewNamespace","onKeyDown","_handleKeyPress","document","getElementById","namespaceLabel","_selectNamespace","_removeNamespace","_onClickAddNamespace","_onClickCancelNamespace","_renderEditMarks","_addSelected","show","trigger","val","hide","event","findModel","findWhere","_renderDimension","newNamespace","trim","existedNamespaces","text","currentTarget","newModel","metricNamesList","statisticsList","_modifyEditMark","stopPropagation","removedModel","lastIndex","which","MetricsConfigurationAdvancedView","AdvanceViewTemplate","append","_renderNamespaces","_cancelModifications","namespaceListPanel","window","off","css","attrs","errNamespace","_containsEmptyItem","twoDimensionArray","some","ele","isEqual","MetricsConfigurationRow","dimensionField","metricField","dimensionKeyList","metricKeyList","defaultDimensionKeyList","metricItem","dimensionItem","MetricRowTemplate","service","metrics","_restrictStringLength","dimensions","isMetricsModified","isDimensionModified","substring","MetricsConfigurationView","globalConfig","setValue","util","mainModel","cachedChangeSet","_loadDefaultSettings","done","_generateViewModel","_updateModel","innerHTML","count","_renderRows","querySelector","addEventListener","_goAdvancedSetting","dfd","Deferred","contextURL","createRESTURL","app","sharing","fetch","then","response","json","cloudwatchSettings","entry","content","statistics","responseDimensions","dimensionArr","_this3","resolve","models","_this4","metricDimensions","metricNames","serviceMark","setState","prevState","metric_dimensions","metric_names","metricNameField","isUndefined","sortBy","_this5","_loadSelectedNameSpace","namespaceField","statisticsField","dimensionsList","metricsList","_this6","tempModel","advancedView","_this7","_updateModifications","errMessage","_validateModel"],"mappings":"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"}