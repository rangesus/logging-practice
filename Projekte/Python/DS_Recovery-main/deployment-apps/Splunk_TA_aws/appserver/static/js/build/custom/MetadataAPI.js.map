{"version":3,"file":"MetadataAPI.js","sources":["../../../../../../../build-ui/js/MetadataAPI.js"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport { template } from 'underscore'\nimport MetadataAPITemplate from '../html/MetadataAPITemplate.html'\nimport MetadataTemplate from '../html/MetadataTemplate.html'\nimport '../stylesheets/MetadataAPI.css'\n\nconst DEFAULT_INTERVAL = 3600\nconst APIS = [\n  'ec2_volumes',\n  'ec2_instances',\n  'ec2_reserved_instances',\n  'ebs_snapshots',\n  'classic_load_balancers',\n  'application_load_balancers',\n  'vpcs',\n  'vpc_network_acls',\n  'vpn_gateways',\n  'internet_gateways',\n  'customer_gateways',\n  'nat_gateways',\n  'local_gateways',\n  'carrier_gateways',\n  'transit_gateways',\n  'cloudfront_distributions',\n  'vpc_subnets',\n  'rds_instances',\n  'ec2_key_pairs',\n  'ec2_security_groups',\n  'ec2_images',\n  'ec2_addresses',\n  'lambda_functions',\n  's3_buckets',\n  'iam_users'\n]\n\nclass APIsInput {\n  /**\n     *\n     * @constructor\n     * @param {Object} globalConfig - Global configuration.\n     * @param {element} el - The element of the custom row.\n     * @param {string} data - Service name.\n     * @param {object} util - the utility object\n     * @param {function} setValue - set value of the custom field\n     */\n  constructor (globalConfig, el, data, setValue, util) {\n    this.globalConfig = globalConfig\n    this.el = el\n    this.data = data\n    this.util = util\n    this.setValue = setValue\n  }\n\n  _setAPIs () {\n    const apis = APIS.filter((api) => {\n      const isChecked = this.el.querySelector(`input.api-name[name=${api}]`).checked\n      return isChecked\n    }).map((api) => {\n      const interval = this.el.querySelector(`input.api-interval[name=${api}]`).value\n      return `${api}/${interval}`\n    }).join(', ')\n    this.util.setState((prevState) => {\n      const data = { ...prevState.data }\n      data.apis.value = apis\n      return { data }\n    })\n  }\n\n  _updateUI (event) {\n    const checkbox = event.composedPath()[0]\n    const api = checkbox.getAttribute('name')\n    const checked = checkbox.checked\n    this.el.querySelector(`input.api-interval[name=${api}]`).disabled = !checked\n    this._setAPIs()\n  }\n\n  render () {\n    const apiTemplate = template(MetadataAPITemplate)\n    this.el.innerHTML = template(MetadataTemplate)()\n    let html = ''\n\n    if (this.data.mode !== 'create') {\n      const apis = this.data.value.split(',')\n      html = APIS.map((api) => {\n        const found = apis.find((item) => {\n          const apiName = item.split('/')[0].trim()\n          return apiName === api\n        })\n        return apiTemplate({\n          api: api,\n          api_label: api,\n          checked: found ? 'checked' : '',\n          disabled: found ? '' : 'disabled',\n          interval: found ? found.split('/')[1].trim() : DEFAULT_INTERVAL\n        })\n      }).join('')\n    } else {\n      html = APIS.map((api) => {\n        const isApiGateway = api.endsWith('_gateways')\n        const isDefaultUnselected = isApiGateway\n        return apiTemplate({\n          api: api,\n          api_label: api,\n          checked: isDefaultUnselected ? '' : 'checked',\n          disabled: isDefaultUnselected ? 'disabled' : '',\n          interval: DEFAULT_INTERVAL\n        })\n      }).join('')\n    }\n    this.el.querySelector('#apis-field').innerHTML = html\n    this._setAPIs()\n\n    const APITextbox = this.el.querySelectorAll('input.api-interval')\n    APITextbox.forEach((item) => {\n      item.addEventListener('keyup', (event) => { this._setAPIs() })\n      item.addEventListener('mouseup', (event) => { this._setAPIs() })\n    })\n\n    const APICheckbox = this.el.querySelectorAll('input.api-name')\n    APICheckbox.forEach((item) => {\n      item.addEventListener('click', (event) => { this._updateUI(event) })\n    })\n    return this\n  }\n}\n\nexport default APIsInput\n"],"names":["APIS","APIsInput","globalConfig","el","data","setValue","util","apis","filter","api","_this","querySelector","checked","map","interval","value","join","setState","prevState","event","checkbox","composedPath","getAttribute","disabled","_setAPIs","apiTemplate","template","innerHTML","html","this","mode","split","found","find","item","trim","api_label","isApiGateway","endsWith","querySelectorAll","forEach","addEventListener","_this2","_updateUI"],"mappings":"uHAYMA,EAAO,CACX,cACA,gBACA,yBACA,gBACA,yBACA,6BACA,OACA,mBACA,eACA,oBACA,oBACA,eACA,iBACA,mBACA,mBACA,2BACA,cACA,gBACA,gBACA,sBACA,aACA,gBACA,mBACA,aACA,aAGIC,wBAUSC,EAAcC,EAAIC,EAAMC,EAAUC,kBACxCJ,aAAeA,OACfC,GAAKA,OACLC,KAAOA,OACPE,KAAOA,OACPD,SAAWA,oCAGlB,sBACQE,EAAOP,EAAKQ,QAAO,SAACC,UACNC,EAAKP,GAAGQ,4CAAqCF,QAAQG,WAEtEC,KAAI,SAACJ,OACAK,EAAWJ,EAAKP,GAAGQ,gDAAyCF,QAAQM,sBAChEN,cAAOK,MAChBE,KAAK,WACHV,KAAKW,UAAS,SAACC,OACZd,OAAYc,EAAUd,aAC5BA,EAAKG,KAAKQ,MAAQR,EACX,CAAEH,KAAAA,+BAIb,SAAWe,OACHC,EAAWD,EAAME,eAAe,GAChCZ,EAAMW,EAASE,aAAa,QAC5BV,EAAUQ,EAASR,aACpBT,GAAGQ,gDAAyCF,QAAQc,UAAYX,OAChEY,iCAGP,sBACQC,EAAcC,ipBACfvB,GAAGwB,UAAYD,onBAAAA,OAChBE,EAAO,MAEY,WAAnBC,KAAKzB,KAAK0B,KAAmB,KACzBvB,EAAOsB,KAAKzB,KAAKW,MAAMgB,MAAM,KACnCH,EAAO5B,EAAKa,KAAI,SAACJ,OACTuB,EAAQzB,EAAK0B,MAAK,SAACC,UACPA,EAAKH,MAAM,KAAK,GAAGI,SAChB1B,YAEdgB,EAAY,CACjBhB,IAAKA,EACL2B,UAAW3B,EACXG,QAASoB,EAAQ,UAAY,GAC7BT,SAAUS,EAAQ,GAAK,WACvBlB,SAAUkB,EAAQA,EAAMD,MAAM,KAAK,GAAGI,OAvFvB,UAyFhBnB,KAAK,SAERY,EAAO5B,EAAKa,KAAI,SAACJ,OACT4B,EAAe5B,EAAI6B,SAAS,oBAE3Bb,EAAY,CACjBhB,IAAKA,EACL2B,UAAW3B,EACXG,QAJ0ByB,EAIK,GAAK,UACpCd,SAL0Bc,EAKM,WAAa,GAC7CvB,SAnGe,UAqGhBE,KAAK,gBAELb,GAAGQ,cAAc,eAAegB,UAAYC,OAC5CJ,WAEcK,KAAK1B,GAAGoC,iBAAiB,sBACjCC,SAAQ,SAACN,GAClBA,EAAKO,iBAAiB,SAAS,SAACtB,GAAYuB,EAAKlB,cACjDU,EAAKO,iBAAiB,WAAW,SAACtB,GAAYuB,EAAKlB,iBAGjCK,KAAK1B,GAAGoC,iBAAiB,kBACjCC,SAAQ,SAACN,GACnBA,EAAKO,iBAAiB,SAAS,SAACtB,GAAYuB,EAAKC,UAAUxB,SAEtDU"}