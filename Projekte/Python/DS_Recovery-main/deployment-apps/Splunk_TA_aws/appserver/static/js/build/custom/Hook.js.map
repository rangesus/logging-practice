{"version":3,"file":"Hook.js","sources":["../../../../../../../build-ui/js/utils/HelpLinkUtil.js","../../../../../../../build-ui/js/hooks/useFormData.jsx","../../../../../../../build-ui/js/components/QueueInput.jsx","../../../../../../../build-ui/js/components/RulesInput.jsx","../../../../../../../build-ui/js/components/MultiQueueInput.jsx","../../../../../../../build-ui/js/components/RegionInput.jsx","../../../../../../../build-ui/js/components/SingleInputWrapper.jsx","../../../../../../../build-ui/js/components/CustomFormRows.jsx","../../../../../../../build-ui/js/components/FormRowsWrapper.jsx","../../../../../../../build-ui/js/Hook.js"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nclass HelpLinkUtil {\n  getServiceLocationMap () {\n    return ({\n      aws_description: 'aws.description',\n      aws_config: 'aws.config',\n      aws_config_rule: 'aws.configrules',\n      aws_cloudwatch: 'aws.cloudwatch',\n      aws_cloudwatch_logs: 'aws.cloudwatchlogs',\n      aws_s3: 'aws.s3',\n      splunk_ta_aws_logs: 'aws.incrementals3',\n      aws_sqs_based_s3: 'aws.sqs_based_s3',\n      aws_billing: 'aws.billing',\n      aws_billing_cur: 'aws.billing.cur',\n      aws_cloudtrail: 'aws.cloudtrail',\n      aws_kinesis: 'aws.kinesis',\n      aws_inspector: 'aws.inspector',\n      splunk_ta_aws_sqs: 'aws.sqs'\n    })\n  }\n\n  getAllLinks () {\n    return ({\n      // aws.configure_aws.configure_sqs is hard coded in globalConfig.json\n      SQS_BASED_S3: 'aws.configure_aws.configure_sqs'\n    })\n  }\n\n  buildInputLink (input) {\n    const link = getServiceLocationMap()[input]\n    const text = 'Learn more'\n    return `<a data-test=\"link\" target=\"_blank\" class=\"imDUvl\" href=\"/help?location=${encodeURIComponent('[AddOns:released]')}${link}\">${text}<svg focusable=\"false\" height=\"8px\" width=\"8px\" viewBox=\"0 0 1500 1499\" aria-hidden=\"false\" class=\"help-link-icon\"><path d=\"M1500 1125h-189.04v185.96H189.04V189.04H375V0H0v1500h1500v-375zm0-1125H723.288v190.068h469.52l-666.78 648.288 133.56 134.59 650.344-665.754v469.52l189.04 1.028L1500 0z\"></path></svg></a>`\n  }\n}\n\nexport const { buildInputLink, getAllLinks, getServiceLocationMap } = new HelpLinkUtil()\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport React, { createContext, useContext, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const FormDataContext = createContext({\n  regions: [],\n  setRegions: () => {},\n  queues: [],\n  setQueues: () => {},\n  effectiveState: {},\n  setEffectiveState: () => {},\n});\n\nexport const FormDataContextProvider = ({ hookProps, children }) => {\n  const { initFormRows, setFormState, serviceName, initAccount } = hookProps;\n  const [account, setAccount] = useState(initAccount);\n  const [effectiveFormRows, setEffectiveFormRows] = useState(initFormRows);\n\n  const [regions, setRegions] = useState({});\n  const [queues, setQueues] = useState({});\n  const [rules, setRules] = useState({});\n\n  return (\n    <FormDataContext.Provider\n      value={{\n        setFormState, // to set values for region and queue in UCC form\n        serviceName, // input name\n        account, // selected account name\n        setAccount, // will be later attached to window object to provide hook data binding\n        effectiveFormRows, // maintains selected values of form rows\n        setEffectiveFormRows, // to set values of form rows\n        // rest are used for managing state of individual form row components\n        regions,\n        setRegions,\n        queues,\n        setQueues,\n        rules,\n        setRules,\n      }}\n    >\n      {children}\n    </FormDataContext.Provider>\n  );\n};\n\nFormDataContextProvider.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n\nexport const useFormData = () => useContext(FormDataContext);\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport React, { useState, useEffect, memo } from \"react\";\nimport Select from \"@splunk/react-ui/Select\";\nimport { CSRFToken } from \"@splunk/splunk-utils/config\";\nimport { createRESTURL } from \"@splunk/splunk-utils/url\";\n\nimport { useFormData } from \"../hooks/useFormData\";\n\nconst valueStyle = {\n  flex: \"1 0 0\",\n  borderColor: \"rgb(195, 203, 212)\",\n};\n\nconst ERROR_REGEX = /REST Error \\[([0-9]+)\\]: (.*)\\\\\".  See/;\n\nfunction QueueInput({\n  initValue,\n  effectiveRegion,\n  index,\n  handleFormStateUpdate,\n}) {\n  const { queues, setQueues, account, setFormState } = useFormData();\n  const [value, setValue] = useState(initValue);\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [oldAwsRegion, setOldAwsRegion] = useState(effectiveRegion);\n\n  const handleChange = (e, { value }) => {\n    handleFormStateUpdate(index, effectiveRegion, value);\n    setValue(value);\n  };\n  const resetValues = (updateForm) => {\n    if (updateForm) {\n      handleFormStateUpdate(index, effectiveRegion, null);\n    }\n    setValue();\n    setOptions([]);\n    setLoading(false);\n  };\n  const generateOptions = (items) => {\n    return items.map((x) => <Select.Option label={x.label} value={x.value} />);\n  };\n  useEffect(() => {\n    if (!account) {\n      // if account is reset then the `RegionInput` removes the key from form state\n      resetValues(false);\n    }\n    if (typeof queues[account]?.[effectiveRegion] !== \"undefined\") {\n      setOptions(generateOptions(queues[account][effectiveRegion]));\n      // reset values in case dependent singleselect value is changed\n      if (effectiveRegion !== oldAwsRegion) {\n        setOldAwsRegion(effectiveRegion);\n        handleFormStateUpdate(index, effectiveRegion, null);\n        setValue();\n      }\n      setLoading(false);\n    }\n  }, [account, effectiveRegion, queues]);\n  useEffect(() => {\n    if (\n      account &&\n      effectiveRegion &&\n      typeof queues[account]?.[effectiveRegion] === \"undefined\"\n    ) {\n      setLoading(true);\n      const url = new URL(\n        createRESTURL(\"splunk_ta_aws/splunk_ta_aws_sqs_queue_names\"),\n        location\n      );\n      const params = {\n        aws_account: account,\n        aws_region: effectiveRegion,\n        output_mode: \"json\",\n        count: \"0\",\n      };\n      const headers = {\n        \"X-Splunk-Form-Key\": CSRFToken,\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        \"Content-Type\": \"application/json\",\n      };\n      url.search = new URLSearchParams(params).toString();\n      /* Check if checkpoint for the entered Input Name exists of not. */\n      fetch(url, {\n        method: \"GET\",\n        headers,\n      })\n        .then((response) => {\n          if (!response.ok) {\n            return Promise.reject(response);\n          } else {\n            return response.json();\n          }\n        })\n        .then((content) => {\n          const entries = content?.entry || [];\n          const newQueues = { ...queues };\n          newQueues[account] =\n            typeof newQueues[account] === \"undefined\" ? {} : newQueues[account];\n          newQueues[account][effectiveRegion] = entries.map((x) => ({\n            label: x.name,\n            value: x.name,\n          }));\n          setQueues(newQueues);\n        })\n        .catch((error) => {\n          resetValues(true);\n          let message = `Failed to get SQS Queue for Region ${effectiveRegion}. `;\n          if (typeof error.text === \"function\") {\n            error.text().then((responseText) => {\n              let matches = responseText.match(ERROR_REGEX);\n\n              if (matches && matches.length === 3) {\n                message += `[${matches[1]}] ${matches[2]}`;\n              } else {\n                message += responseText;\n              }\n              setFormState((prevState) => {\n                const newState = { ...prevState };\n                newState.errorMsg = message;\n                return newState;\n              });\n            });\n          } else {\n            message += error;\n            setFormState((prevState) => {\n              const newState = { ...prevState };\n              newState.errorMsg = message;\n              return newState;\n            });\n          }\n        });\n    }\n  }, [account, effectiveRegion]);\n  return (\n    <Select\n      value={value}\n      onChange={handleChange}\n      disabled={loading}\n      placeholder={loading ? \"Loading...\" : \"Select an account and a region first\"}\n      style={valueStyle}\n      filter\n      inline\n    >\n      {options}\n    </Select>\n  );\n}\n\nexport default memo(QueueInput);\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport React, { useState, useEffect, memo } from \"react\";\nimport Multiselect from \"@splunk/react-ui/Multiselect\";\nimport { CSRFToken } from \"@splunk/splunk-utils/config\";\nimport { createRESTURL } from \"@splunk/splunk-utils/url\";\n\nimport { useFormData } from \"../hooks/useFormData\";\n\nconst valueStyle = {\n  flex: \"1 0 0\",\n  borderColor: \"rgb(195, 203, 212)\",\n};\n\nconst ERROR_REGEX = /REST Error \\[([0-9]+)\\]: (.*)\\\\\".  See/;\n\nfunction RulesInput({\n  initValue,\n  effectiveRegion,\n  index,\n  handleFormStateUpdate,\n}) {\n  const { rules, setRules, account, setFormState } = useFormData();\n  const [values, setValues] = useState(initValue);\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [oldAwsRegion, setOldAwsRegion] = useState(effectiveRegion);\n\n  const handleChange = (e, { values }) => {\n    handleFormStateUpdate(index, effectiveRegion, values);\n    setValues(values);\n  };\n  const resetValues = (updateForm) => {\n    if (updateForm) {\n      handleFormStateUpdate(index, effectiveRegion, []);\n    }\n    setValues([]);\n    setOptions([]);\n    setLoading(false);\n  };\n  const generateOptions = (items) => {\n    return items.map((x) => (\n      <Multiselect.Option label={x.label} value={x.value} />\n    ));\n  };\n  useEffect(() => {\n    if (!account) {\n      // if account is reset then the `RegionInput` removes the key from form state\n      resetValues(false);\n    }\n    if (typeof rules[account]?.[effectiveRegion] !== \"undefined\") {\n      setOptions(generateOptions(rules[account][effectiveRegion]));\n      // reset values in case dependent singleselect value is changed\n      if (effectiveRegion !== oldAwsRegion) {\n        setOldAwsRegion(effectiveRegion);\n        handleFormStateUpdate(index, effectiveRegion, []);\n        setValues([]);\n      }\n      setLoading(false);\n    }\n  }, [account, effectiveRegion, rules]);\n  useEffect(() => {\n    if (\n      account &&\n      effectiveRegion &&\n      typeof rules[account]?.[effectiveRegion] === \"undefined\"\n    ) {\n      setLoading(true);\n      const url = new URL(\n        createRESTURL(\"splunk_ta_aws/splunk_ta_aws_config_rules\"),\n        location\n      );\n      const params = {\n        aws_account: account,\n        aws_region: effectiveRegion,\n        output_mode: \"json\",\n        count: \"0\",\n      };\n      const headers = {\n        \"X-Splunk-Form-Key\": CSRFToken,\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        \"Content-Type\": \"application/json\",\n      };\n      url.search = new URLSearchParams(params).toString();\n      /* Check if checkpoint for the entered Input Name exists of not. */\n      fetch(url, {\n        method: \"GET\",\n        headers,\n      })\n        .then((response) => {\n          if (!response.ok) {\n            return Promise.reject(response);\n          } else {\n            return response.json();\n          }\n        })\n        .then((content) => {\n          const entries = content?.entry || [];\n          const newRules = { ...rules };\n          newRules[account] =\n            typeof newRules[account] === \"undefined\" ? {} : newRules[account];\n          newRules[account][effectiveRegion] = entries.map((x) => ({\n            label: x.name,\n            value: x.name,\n          }));\n          setRules(newRules);\n        })\n        .catch((error) => {\n          resetValues(true);\n          let message = `Failed to get Config Rules for Region ${effectiveRegion}. `;\n          if (typeof error.text === \"function\") {\n            error.text().then((responseText) => {\n              let matches = responseText.match(ERROR_REGEX);\n\n              if (matches && matches.length === 3) {\n                message += `[${matches[1]}] ${matches[2]}`;\n              } else {\n                message += responseText;\n              }\n              setFormState((prevState) => {\n                const newState = { ...prevState };\n                newState.errorMsg = message;\n                return newState;\n              });\n            });\n          } else {\n            message += error;\n            setFormState((prevState) => {\n              const newState = { ...prevState };\n              newState.errorMsg = message;\n              return newState;\n            });\n          }\n        });\n    }\n  }, [account, effectiveRegion]);\n  return (\n    <Multiselect\n      values={values}\n      onChange={handleChange}\n      disabled={loading}\n      placeholder={loading ? \"Loading...\" : \"Leave blank to select all rules in this region\"}\n      style={valueStyle}\n      inline\n    >\n      {options}\n    </Multiselect>\n  );\n}\n\nexport default memo(RulesInput);\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport React, { useState, useEffect, memo } from \"react\";\nimport Multiselect from \"@splunk/react-ui/Multiselect\";\nimport { CSRFToken } from \"@splunk/splunk-utils/config\";\nimport { createRESTURL } from \"@splunk/splunk-utils/url\";\n\nimport { useFormData } from \"../hooks/useFormData\";\n\nconst valueStyle = {\n  flex: \"1 0 0\",\n  borderColor: \"rgb(195, 203, 212)\",\n};\n\nconst ERROR_REGEX = /REST Error \\[([0-9]+)\\]: (.*)\\\\\".  See/;\n\nfunction MultiQueueInput({\n  initValue,\n  effectiveRegion,\n  index,\n  handleFormStateUpdate,\n}) {\n  const { queues, setQueues, account, setFormState, effectiveFormRows } =\n    useFormData();\n  const [values, setValues] = useState(initValue);\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [oldAwsRegion, setOldAwsRegion] = useState(effectiveRegion);\n\n  const handleChange = (e, { values }) => {\n    handleFormStateUpdate(index, effectiveRegion, values);\n    setValues(values);\n  };\n  const resetValues = (updateForm) => {\n    if (updateForm) {\n      handleFormStateUpdate(index, effectiveRegion, []);\n    }\n    setValues([]);\n    setOptions([]);\n    setLoading(false);\n  };\n  const generateOptions = (items) => {\n    return items.map((x) => (\n      <Multiselect.Option label={x.label} value={x.value} />\n    ));\n  };\n  useEffect(() => {\n    if (!account) {\n      // if account is reset then the `RegionInput` removes the key from form state\n      resetValues(false);\n    }\n    if (typeof queues[account]?.[effectiveRegion] !== \"undefined\") {\n      setOptions(generateOptions(queues[account][effectiveRegion]));\n      // reset values in case dependent singleselect value is changed\n      if (effectiveRegion !== oldAwsRegion) {\n        setOldAwsRegion(effectiveRegion);\n        handleFormStateUpdate(index, effectiveRegion, []);\n        setValues([]);\n      }\n      setLoading(false);\n    }\n  }, [account, effectiveRegion, queues]);\n  useEffect(() => {\n    if (\n      account &&\n      effectiveRegion &&\n      typeof queues[account]?.[effectiveRegion] === \"undefined\"\n    ) {\n      setLoading(true);\n      const url = new URL(\n        createRESTURL(\"splunk_ta_aws/splunk_ta_aws_sqs_queue_names\"),\n        location\n      );\n      const params = {\n        aws_account: account,\n        aws_region: effectiveRegion,\n        output_mode: \"json\",\n        count: \"0\",\n      };\n      const headers = {\n        \"X-Splunk-Form-Key\": CSRFToken,\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        \"Content-Type\": \"application/json\",\n      };\n      url.search = new URLSearchParams(params).toString();\n      /* Check if checkpoint for the entered Input Name exists of not. */\n      fetch(url, {\n        method: \"GET\",\n        headers,\n      })\n        .then((response) => {\n          if (!response.ok) {\n            return Promise.reject(response);\n          } else {\n            return response.json();\n          }\n        })\n        .then((content) => {\n          const entries = content?.entry || [];\n          const newQueues = { ...queues };\n          newQueues[account] =\n            typeof newQueues[account] === \"undefined\" ? {} : newQueues[account];\n          newQueues[account][effectiveRegion] = entries.map((x) => ({\n            label: x.name,\n            value: x.name,\n          }));\n          setQueues(newQueues);\n        })\n        .catch((error) => {\n          resetValues(true);\n          let message = `Failed to get SQS Queues for Region ${effectiveRegion}. `;\n          if (typeof error.text === \"function\") {\n            error.text().then((responseText) => {\n              let matches = responseText.match(ERROR_REGEX);\n\n              if (matches && matches.length === 3) {\n                message += `[${matches[1]}] ${matches[2]}`;\n              } else {\n                message += responseText;\n              }\n              setFormState((prevState) => {\n                const newState = { ...prevState };\n                newState.errorMsg = message;\n                return newState;\n              });\n            });\n          } else {\n            message += error;\n            setFormState((prevState) => {\n              const newState = { ...prevState };\n              newState.errorMsg = message;\n              return newState;\n            });\n          }\n        });\n    }\n  }, [account, effectiveRegion]);\n  return (\n    <Multiselect\n      values={values}\n      onChange={handleChange}\n      disabled={loading}\n      placeholder={loading ? \"Loading...\" : \"Select an account and a region first\"}\n      style={valueStyle}\n      inline\n    >\n      {options}\n    </Multiselect>\n  );\n}\n\nexport default memo(MultiQueueInput);\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport React, { useState, useEffect, memo } from \"react\";\nimport Select from \"@splunk/react-ui/Select\";\nimport { CSRFToken } from \"@splunk/splunk-utils/config\";\nimport { createRESTURL } from \"@splunk/splunk-utils/url\";\n\nimport { useFormData } from \"../hooks/useFormData\";\n\nconst keyStyle = {\n  flex: \"0 0 150px\",\n  display: \"flex\",\n  alignItems: \"center\",\n};\n\nconst ERROR_REGEX = /REST Error \\[([0-9]+)\\]: (.*)\\\\\".  See/;\n\nfunction RegionInput({\n  initValue,\n  handleChangeRegion,\n  index,\n  handleFormStateUpdate,\n  handleFormStateDelete,\n}) {\n  const { regions, setRegions, serviceName, account, setFormState } =\n    useFormData();\n  const [options, setOptions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [value, setValue] = useState(initValue);\n\n  const handleChange = (e, { value }) => {\n    setValue(value);\n    handleChangeRegion(value);\n    if (serviceName === \"aws_config_rule\") {\n      handleFormStateUpdate(index, value, []);\n    } else if (serviceName === \"splunk_ta_aws_sqs\") {\n      handleFormStateUpdate(index, value, []);\n    } else {\n      handleFormStateUpdate(index, value, null);\n    }\n    // reset error message of rest requests on filter change\n    setFormState((prevState) => {\n      const newState = { ...prevState };\n      newState.errorMsg = \"\";\n      return newState;\n    });\n  };\n  const resetValues = () => {\n    handleFormStateDelete(index);\n    setValue();\n    setOptions([]);\n    setLoading(false);\n  };\n  const generateOptions = (items) => {\n    const list = items.map((x) => (\n      <Select.Option label={x.label} value={x.value} />\n    ));\n    return list;\n  };\n\n  useEffect(() => {\n    if (!account) {\n      resetValues();\n    }\n    if (typeof regions[account] !== \"undefined\") {\n      setOptions(generateOptions(regions[account]));\n      setLoading(false);\n    }\n  }, [account, regions]);\n  useEffect(() => {\n    if (account && typeof regions[account] === \"undefined\") {\n      setLoading(true);\n      const url = new URL(\n        createRESTURL(\"splunk_ta_aws/splunk_ta_aws_regions\"),\n        location\n      );\n      const params = {\n        aws_service: serviceName,\n        aws_account: account,\n        output_mode: \"json\",\n        count: \"0\",\n      };\n      const headers = {\n        \"X-Splunk-Form-Key\": CSRFToken,\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        \"Content-Type\": \"application/json\",\n      };\n      url.search = new URLSearchParams(params).toString();\n      /* Check if checkpoint for the entered Input Name exists of not. */\n      fetch(url, {\n        method: \"GET\",\n        headers,\n      })\n        .then((response) => {\n          if (!response.ok) {\n            return Promise.reject(response);\n          } else {\n            return response.json();\n          }\n        })\n        .then((content) => {\n          const entries = content?.entry || [];\n          const newRegions = { ...regions };\n          newRegions[account] = entries.map((x) => ({\n            label: x.content.label,\n            value: x.name,\n          }));\n          setRegions(newRegions);\n        })\n        .catch((error) => {\n          resetValues();\n          let message = `Failed to get Region for Account ${account}. `;\n          if (typeof error.text === \"function\") {\n            error.text().then((responseText) => {\n              let matches = responseText.match(ERROR_REGEX);\n\n              if (matches && matches.length === 3) {\n                message += `[${matches[1]}] ${matches[2]}`;\n              } else {\n                message += responseText;\n              }\n              setFormState((prevState) => {\n                const newState = { ...prevState };\n                newState.errorMsg = message;\n                return newState;\n              });\n            });\n          } else {\n            message += error;\n            setFormState((prevState) => {\n              const newState = { ...prevState };\n              newState.errorMsg = message;\n              return newState;\n            });\n          }\n        });\n    }\n  }, [account]);\n  return (\n    <div style={keyStyle}>\n      <Select\n        value={value}\n        onChange={handleChange}\n        disabled={loading}\n        placeholder={loading ? \"Loading...\" : \"Select...\"}\n        style={{ width: \"150px\", minWidth: \"100%\", borderColor: \"rgb(195, 203, 212)\" }}\n        filter\n        inline\n      >\n        {options}\n      </Select>\n    </div>\n  );\n}\n\nexport default memo(RegionInput);\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport React, { useState, memo, useEffect } from \"react\";\n\nimport QueueInput from \"./QueueInput\";\nimport RulesInput from \"./RulesInput\";\nimport MultiQueueInput from \"./MultiQueueInput\";\nimport { useFormData } from \"../hooks/useFormData\";\nimport RegionInput from \"./RegionInput\";\n\nconst spanStyle = {\n  display: \"inline-flex\",\n  lineHeight: \"32px\",\n  flex: \"0 0 30px\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n};\n\nfunction SingleInputWrapper({\n  initValue,\n  index,\n  handleFormStateUpdate,\n  handleFormStateDelete,\n}) {\n  const [effectiveRegion, setEffectiveRegion] = useState(initValue?.region);\n  const { serviceName } = useFormData();\n\n  useEffect(() => {\n    // remove item from effectiveFormState on component unmount\n    return () => {\n      handleFormStateDelete(index);\n    };\n  }, []);\n\n  let secondInput = (\n    <RulesInput\n      initValue={initValue?.rules}\n      effectiveRegion={effectiveRegion}\n      index={index}\n      handleFormStateUpdate={handleFormStateUpdate}\n    />\n  );\n  if (serviceName === \"splunk_ta_aws_sqs\") {\n    secondInput = (\n      <MultiQueueInput\n        initValue={initValue?.queues}\n        effectiveRegion={effectiveRegion}\n        index={index}\n        handleFormStateUpdate={handleFormStateUpdate}\n      />\n    );\n  } else if (serviceName === \"aws_config\") {\n    secondInput = (\n      <QueueInput\n        initValue={initValue?.queues}\n        effectiveRegion={effectiveRegion}\n        index={index}\n        handleFormStateUpdate={handleFormStateUpdate}\n      />\n    );\n  }\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      <RegionInput\n        initValue={initValue?.region}\n        handleChangeRegion={setEffectiveRegion}\n        index={index}\n        handleFormStateUpdate={handleFormStateUpdate}\n        handleFormStateDelete={handleFormStateDelete}\n      />\n      <span style={spanStyle}></span>\n      {secondInput}\n    </div>\n  );\n}\n\nexport default memo(SingleInputWrapper);\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport React, { useState, useEffect, memo } from \"react\";\n\nimport { createDOMID } from \"@splunk/ui-utils/id\";\nimport FormRows from \"@splunk/react-ui/FormRows\";\n\nimport { useFormData } from \"../hooks/useFormData\";\nimport SingleInputWrapper from \"./SingleInputWrapper\";\n\nfunction CustomFormRows() {\n  const [items, setItems] = useState([]);\n  const {\n    setAccount,\n    serviceName,\n    setFormState,\n    effectiveFormRows,\n    setEffectiveFormRows,\n  } = useFormData();\n\n  // data binding for account state var -> custom hook onChange\n  window.setAccount = (value) => {\n    setAccount(value);\n  };\n\n  useEffect(() => {\n    // update form state to submit updated data on form save\n    const regions = [];\n    const queues = [];\n    const rules = [];\n    Object.entries(effectiveFormRows).forEach(([_, v]) => {\n      regions.push(v.region);\n      if (serviceName === \"aws_config_rule\") {\n        rules.push(v.rules && v.rules.join(\",\"));\n      } else if (serviceName === \"splunk_ta_aws_sqs\") {\n        queues.push(v.queues && v.queues.join(\",\"));\n      } else {\n        queues.push(v.queues);\n      }\n    });\n    setFormState((prevState) => {\n      const newState = { ...prevState };\n      if (serviceName === \"aws_config_rule\") {\n        newState.data.region.value =\n          regions.length === 0 ? JSON.stringify([\"\"]) : JSON.stringify(regions);\n        newState.data.rule_names.value =\n          rules.length === 0 ? JSON.stringify([\"\"]) : JSON.stringify(rules);\n      } else if (serviceName === \"splunk_ta_aws_sqs\") {\n        newState.data.aws_region.value =\n          regions.length === 0 ? JSON.stringify([\"\"]) : JSON.stringify(regions);\n        newState.data.sqs_queues.value =\n          queues.length === 0 ? JSON.stringify([\"\"]) : JSON.stringify(queues);\n      } else {\n        newState.data.aws_region.value =\n          regions.length === 0 ? JSON.stringify([\"\"]) : JSON.stringify(regions);\n        newState.data.sqs_queue.value =\n          queues.length === 0 ? JSON.stringify([\"\"]) : JSON.stringify(queues);\n      }\n      return newState;\n    });\n  }, [effectiveFormRows]);\n\n  const handleFormStateUpdate = (index, region, value) => {\n    setEffectiveFormRows((oldFormRows) => {\n      const newFormRows = { ...oldFormRows };\n      if (serviceName === \"aws_config_rule\") {\n        newFormRows[index] = { region, rules: value };\n      } else if (serviceName === \"splunk_ta_aws_sqs\") {\n        newFormRows[index] = { region, queues: value };\n      } else {\n        newFormRows[index] = { region, queues: value };\n      }\n\n      return newFormRows;\n    });\n  };\n\n  const handleFormStateDelete = (index) => {\n    setEffectiveFormRows((oldFormRows) => {\n      const newFormRows = { ...oldFormRows };\n      delete newFormRows[index];\n      return newFormRows;\n    });\n  };\n\n  const handleRequestRemove = (e, { index }) => {\n    setItems((oldItems) => {\n      if (oldItems.length === 1) {\n        return oldItems;\n      }\n      return FormRows.removeRow(index, oldItems);\n    });\n  };\n\n  const handleRequestAdd = () => {\n    setItems((oldItems) => {\n      const index =\n        Date.now().toString(36) + Math.random().toString(36).substr(2);\n      setEffectiveFormRows((oldFormRows) => {\n        const newFormRows = { ...oldFormRows };\n        newFormRows[index] = {};\n        return newFormRows;\n      });\n      return FormRows.addRow(\n        <FormRows.Row\n          index={oldItems.length}\n          key={createDOMID()}\n          onRequestRemove={handleRequestRemove}\n        >\n          <SingleInputWrapper\n            index={index}\n            handleFormStateUpdate={handleFormStateUpdate}\n            handleFormStateDelete={handleFormStateDelete}\n          />\n        </FormRows.Row>,\n        oldItems\n      );\n    });\n  };\n\n  useEffect(() => {\n    if (Object.entries(effectiveFormRows).length > 0) {\n      setItems(\n        Object.entries(effectiveFormRows).map(([k, v], idx) => {\n          return (\n            <FormRows.Row\n              index={idx}\n              key=\"uniqueRowUno\"\n              onRequestRemove={handleRequestRemove}\n            >\n              <SingleInputWrapper\n                initValue={v}\n                index={k}\n                handleFormStateUpdate={handleFormStateUpdate}\n                handleFormStateDelete={handleFormStateDelete}\n              />\n            </FormRows.Row>\n          );\n        })\n      );\n    } else {\n      setItems([\n        <FormRows.Row\n          index={0}\n          key=\"uniqueRowUno\"\n          onRequestRemove={handleRequestRemove}\n        >\n          <SingleInputWrapper\n            index={\n              Date.now().toString(36) + Math.random().toString(36).substr(2)\n            }\n            handleFormStateUpdate={handleFormStateUpdate}\n            handleFormStateDelete={handleFormStateDelete}\n          />\n        </FormRows.Row>,\n      ]);\n    }\n  }, []);\n  let title = \"Config Rules\";\n  if (serviceName === \"splunk_ta_aws_sqs\") {\n    title = \"SQS Queues\";\n  } else if (serviceName === \"aws_config\") {\n    title = \"SQS Queue\";\n  }\n  const header = (\n    <div>\n      <span\n        style={{\n          display: \"inline-block\",\n          width: 180,\n        }}\n        id=\"header-key\"\n      >\n        Region\n      </span>\n      <span style={{ display: \"inline-block\" }} id=\"header-value\">\n        {title}\n      </span>\n    </div>\n  );\n  return (\n    <FormRows\n      addLabel=\"Add Another\"\n      header={header}\n      onRequestAdd={handleRequestAdd}\n      style={{ width: 500 }}\n    >\n      {items}\n    </FormRows>\n  );\n}\n\nexport default memo(CustomFormRows);\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport React from \"react\";\n\nimport { SplunkThemeProvider } from \"@splunk/themes\";\n\nimport { ThemeProviderSettings } from \"../styles/Theme\";\nimport { FormDataContextProvider } from \"../hooks/useFormData\";\nimport CustomFormRows from \"./CustomFormRows\";\n\nfunction FormRowsWrapper({ hookProps }) {\n  return (\n    <SplunkThemeProvider {...ThemeProviderSettings}>\n      <FormDataContextProvider hookProps={hookProps}>\n        <CustomFormRows />\n      </FormDataContextProvider>\n    </SplunkThemeProvider>\n  );\n}\n\nexport default FormRowsWrapper;\n","/*\n * SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>\n * SPDX-License-Identifier: LicenseRef-Splunk-8-2021\n *\n */\n\nimport { CSRFToken } from '@splunk/splunk-utils/config'\nimport { isArray, omit } from 'underscore'\nimport $, { Deferred } from 'jquery'\nimport '../stylesheets/Hook.css'\nimport { getMapData, detectSource } from './configs/SourceInput'\nimport { buildInputLink } from './utils/HelpLinkUtil'\nimport { getComponent } from './utils/GlobalConfigUtil'\nimport moment from 'moment'\nimport { createRESTURL } from '@splunk/splunk-utils/url'\nimport ReactDOM from 'react-dom'\nimport React from 'react'\nimport FormRowsWrapper from './components/FormRowsWrapper'\n\nconst APP_NAME = 'Splunk_TA_aws'\n\nconst MAX_TIME = moment('2038-01-19T03:14:07Z')\n\nconst LOG_NAME_FORMAT_POSTFIX = '.%Y-%m-%d-'\n\nconst SERVICES_WITH_CONFLICT_FIELDS = [\n  'aws_cloudwatch',\n  'aws_config',\n  'aws_config_rule',\n  'splunk_ta_aws_sqs'\n]\n\nconst SERVICES_WITH_GROUP_SELECTION = ['aws_config', 'aws_config_rule', 'splunk_ta_aws_sqs']\n\nconst SQS_BASED_S3_SOURCETYPES = {\n  CloudTrail: 'aws:cloudtrail',\n  Config: 'aws:config',\n  S3AccessLogs: 'aws:s3:accesslogs',\n  CloudFrontAccessLogs: 'aws:cloudfront:accesslogs',\n  ELBAccessLogs: 'aws:elb:accesslogs',\n  CustomLogs: 'aws:s3'\n}\n\nconst SPLUNK_TA_AWS_LOGS_SOURCETYPES = {\n  cloudtrail: 'aws:cloudtrail',\n  's3:accesslogs': 'aws:s3:accesslogs',\n  'cloudfront:accesslogs': 'aws:cloudfront:accesslogs',\n  'elb:accesslogs': 'aws:elb:accesslogs'\n}\n\nconst DLQ_REQUIRED_ERROR = 'Enabling dead letter queue is required for the SQS queue in this input. '\nconst VISIBILITY_TIMEOUT_WARNING =\n    'It is recommended to set VisibilityTimeout no smaller than 5 minutes for specified SQS queue. '\nconst QUEUE_NOT_FOUND_ERROR = 'The SQS Queue entered may not be present in the given region. '\n\nclass Hook {\n  /**\n     * Form hook\n     * @constructor\n     * @param {Object} globalConfig - Global configuration.\n     * @param {string} serviceName - Service name\n     * @param {object} state - object with state of the components on the servcice/page\n     * @param {string} mode - edit,create or clone\n     * @param {object} util - the utility object\n     */\n  constructor (globalConfig, serviceName, state, mode, util) {\n    this.globalConfig = globalConfig\n    this.serviceName = serviceName\n    this.state = state\n    this.mode = mode\n    this.util = util\n    this._debouncedNameChange = this.debounce(this._nameChange.bind(this), 200)\n    this.context = getComponent(globalConfig, serviceName)\n  }\n\n  onCreate () {\n    const cancelButton = $(\"button[label='Cancel']\")\n    // On click of Cancel button, URL is not getting updated properly - queryparams are not completely removed from URL\n    if (cancelButton) {\n      cancelButton.on('click', (e) => this._removeExtraParamsFromURL())\n    }\n  }\n\n  debounce (func, wait) {\n    let timeout\n    return function executedFunction (...args) {\n      clearTimeout(timeout)\n      timeout = setTimeout(() => {\n        func(...args)\n      }, wait)\n    }\n  }\n\n  onChange (field, value, dataDict) {\n    if (field === 's3_file_decoder') {\n      const sourceType = SQS_BASED_S3_SOURCETYPES[value]\n      this._setValue('sourcetype', sourceType)\n    }\n\n    if (field === 'distribution_id') {\n      const logNameFormat = value + LOG_NAME_FORMAT_POSTFIX\n      this._setValue('log_name_format', logNameFormat)\n    }\n    if (this.serviceName === 'aws_config' && field === 'aws_account') {\n      window.setAccount(dataDict.data.aws_account.value)\n    }\n    if (this.serviceName === 'splunk_ta_aws_sqs' && field === 'aws_account') {\n      window.setAccount(dataDict.data.aws_account.value)\n    }\n    if (this.serviceName === 'aws_config_rule' && field === 'account') {\n      window.setAccount(dataDict.data.account.value)\n    }\n  }\n\n  onRender () {\n    const { input, service } = this._getInputService()\n    if (this.mode === 'edit' || this.mode === 'clone') {\n      const val = window.location.toString().split('?')\n      const url = `${val[0]}?service=${service}&input=${input}&action=${this.mode}`\n      setTimeout(() => window.history.pushState({}, '', url))\n    }\n    const label = $('form > div')\n\n    if (label.length > 0) {\n      const html = buildInputLink(service)\n      $(label[0]).append(html)\n    }\n    const mapData = getMapData()\n    const item = mapData.find((item) => {\n      return item.service === service && item.input === input\n    })\n\n    if (item) {\n      const models = omit(item, ['service', 'input'])\n      Object.keys(models).forEach((key) => {\n        this._setValue(key, models[key])\n      })\n    }\n\n    if (SERVICES_WITH_GROUP_SELECTION.includes(this.serviceName)) {\n      const waitForElementToDisplay = (selector, callback, checkFrequencyInMs, timeoutInMs) => {\n        const startTimeInMs = Date.now()\n        const loopSearch = () => {\n          if (document.querySelector(selector) != null) {\n            callback()\n          } else {\n            setTimeout(function () {\n              if (timeoutInMs && Date.now() - startTimeInMs > timeoutInMs) return\n              loopSearch()\n            }, checkFrequencyInMs)\n          }\n        }\n        loopSearch()\n      }\n      this.account = this.state.data[this.serviceName === 'aws_config_rule' ? 'account' : 'aws_account'].value\n      this.initFormRows = {}\n      if (this.mode === 'edit') {\n        if (this.serviceName === 'aws_config_rule') {\n          const awsRegions = JSON.parse(this.state.data.region.value)\n          const ruleNames = JSON.parse(this.state.data.rule_names.value).map((x) => x.split(','))\n          awsRegions.forEach((region, idx) => {\n            // key for `initFormRows` needs to be unique instead of being index\n            this.initFormRows[Date.now().toString(36) + Math.random().toString(36).substr(2)] = {\n              region,\n              rules: ruleNames[idx]\n            }\n          })\n        } else {\n          const awsRegions = JSON.parse(this.state.data.aws_region.value)\n          let sqsQueues = null\n          if (this.serviceName === 'splunk_ta_aws_sqs') {\n            sqsQueues = JSON.parse(this.state.data.sqs_queues.value).map((x) => x.split(','))\n          } else {\n            sqsQueues = JSON.parse(this.state.data.sqs_queue.value)\n          }\n          awsRegions.forEach((region, idx) => {\n            // key for `initFormRows` needs to be unique instead of being index\n            this.initFormRows[Date.now().toString(36) + Math.random().toString(36).substr(2)] = {\n              region,\n              queues: sqsQueues[idx]\n            }\n          })\n        }\n      }\n\n      waitForElementToDisplay(\n        '#group_selection',\n        () => {\n          ReactDOM.render(\n            <FormRowsWrapper\n              hookProps={{\n                initFormRows: this.initFormRows,\n                setFormState: this.util.setState,\n                serviceName: this.serviceName,\n                initAccount: this.account\n              }}\n            />,\n            document.getElementById('group_selection')\n          )\n        },\n        500,\n        9000\n      )\n    }\n\n    if (this.serviceName === 'aws_billing') {\n      if (\n        this.state.data.initial_scan_datetime.value === null ||\n                this.state.data.initial_scan_datetime.value === ''\n      ) {\n        const defaultValue =\n                    moment().utc().subtract(3, 'months').startOf('month').format('YYYY-MM-DDTHH:mm:ss') + 'Z'\n        this._setValue('initial_scan_datetime', defaultValue)\n      }\n    } else if (this.serviceName === 'aws_billing_cur') {\n      if (this.state.data.start_date.value === null || this.state.data.start_date.value === '') {\n        const defaultValue = moment().utc().subtract(3, 'months').startOf('month').format('YYYY-MM')\n        this._setValue('start_date', defaultValue)\n      }\n    } else if (this.serviceName === 'aws_s3') {\n      if (\n        this.state.data.initial_scan_datetime.value === null ||\n                this.state.data.initial_scan_datetime.value === ''\n      ) {\n        const defaultValue = moment().utc().format('YYYY-MM-DDTHH:mm:ss') + 'Z'\n        this._setValue('initial_scan_datetime', defaultValue)\n      }\n    } else if (this.serviceName === 'aws_sqs_based_s3') {\n      // Do not set sourcetype in case of 'edit'\n      if (this.state.data.sourcetype.value === null || this.state.data.sourcetype.value === '') {\n        const sourceType = SQS_BASED_S3_SOURCETYPES[this.state.data.s3_file_decoder.value]\n        this._setValue('sourcetype', sourceType)\n      }\n    }\n\n    if (this.serviceName === 'aws_s3') {\n      if (input !== 'aws_cloudtrail') {\n        this._hideField('ct_blacklist')\n      }\n\n      if (input !== 'others') {\n        this._hideField(['whitelist', 'blacklist'])\n        this._disabledField('sourcetype')\n      }\n    } else if (this.serviceName === 'splunk_ta_aws_logs') {\n      if (input === 'cloudfront_access_logs') {\n        this._hideField('distribution_id', true)\n      }\n      const sourceType = SPLUNK_TA_AWS_LOGS_SOURCETYPES[this.state.data.log_type.value]\n      this._setValue('sourcetype', sourceType)\n      const defaultValue = moment().utc().subtract(7, 'days').format('YYYY-MM-DD')\n      this._setValue('log_start_date', defaultValue)\n      this._disabledField(['log_type', 'sourcetype'])\n      if (this.mode !== 'create' && input === 'cloudfront_access_logs') {\n        let distributionID = this.state.data.log_name_format.value\n        if (distributionID.indexOf(LOG_NAME_FORMAT_POSTFIX) !== -1) {\n          distributionID = distributionID.substring(0, distributionID.length - LOG_NAME_FORMAT_POSTFIX.length)\n        }\n        this._setValue('distribution_id', distributionID)\n        if (this.mode === 'edit') {\n          this._disabledField('distribution_id')\n        }\n      }\n    } else if (this.serviceName === 'aws_sqs_based_s3') {\n      if (input !== 'others') {\n        this._disabledField(['s3_file_decoder', 'sourcetype'])\n      }\n    } else if (this.serviceName === 'aws_kinesis') {\n      if (input === 'vpc_flow_logs') {\n        this._disabledField(['format', 'encoding', 'sourcetype'])\n      }\n    }\n  }\n\n  onSave (dataDict) {\n    if (this.serviceName === 'splunk_ta_aws_logs' && dataDict.log_type === 'cloudfront:accesslogs') {\n      // Cannot set required=true for log_name_format since it is only required in \"cloudfront:accesslogs\"\n      if (dataDict.log_name_format == null) {\n        this.util.setErrorFieldMsg('distribution_id', 'Field Distribution ID is required.')\n        return false\n      } else {\n        this._setValue('distribution_id', null)\n      }\n    } else if (this.serviceName === 'aws_cloudwatch') {\n      if ('period' in dataDict && 'polling_interval' in dataDict) {\n        const times = dataDict.polling_interval / dataDict.period\n\n        if (Math.floor(times) !== times) {\n          this.util.setErrorMsg(\n            'The number of \"Polling Interval\" field should be a multiple of \"Granularity\".'\n          )\n          return false\n        }\n      }\n    } else if (this.serviceName === 'aws_s3') {\n      if ('terminal_scan_datetime' in dataDict) {\n        let termnalTime = dataDict.terminal_scan_datetime\n        try {\n          termnalTime = moment(termnalTime)\n          if (termnalTime > MAX_TIME) {\n            this.util.setErrorFieldMsg(\n              'terminal_scan_datetime',\n              'The max supported timestamp is 2038-01-19T03:14:07Z due to Year 2038 problem'\n            )\n            return false\n          } else {\n            this.util.clearAllErrorMsg()\n          }\n        } catch (err) {\n          return false\n        }\n      }\n    } else if (this.serviceName === 'aws_sqs_based_s3') {\n      if (dataDict.aws_account && dataDict.sqs_queue_region && dataDict.sqs_queue_url) {\n        const isValid = this._validateSQSqueue(dataDict)\n        return isValid\n      }\n    }\n    return true\n  }\n\n  onSaveSuccess () {\n    this._removeExtraParamsFromURL()\n  }\n\n  onSaveFail () {\n    if (\n      this.serviceName === 'splunk_ta_aws_logs' &&\n            this.state.data.log_type.value === 'cloudfront:accesslogs'\n    ) {\n      const logNameFormat = this.state.data.log_name_format.value\n      if (logNameFormat !== null) {\n        const distributionId = logNameFormat.split('.')[0]\n        this._setValue('distribution_id', distributionId)\n      }\n    }\n  }\n\n  onEditLoad () {\n    if (SERVICES_WITH_CONFLICT_FIELDS.includes(this.serviceName)) {\n      this._fetchConflictFields(this.serviceName).done(() => {\n        if (Object.keys(this._conflict_fields || {}).length > 0) {\n          const entity = this.context.entity\n          let msg = 'The following fields have conflict. '\n          msg += Object.keys(this._conflict_fields || {})\n            .map((key) => {\n              if (key !== 'disabled') {\n                this.util.setErrorFieldMsg(key, '')\n              }\n              const globalConfigField = entity.find((el) => el.field === key)\n              const label = (globalConfigField) ? globalConfigField.label : key\n              return `${label} = [${this._conflict_fields[key].join(', ')}]`\n            })\n            .join(', ')\n          msg += '. Please resolve the conflict in conf file first.'\n          this.util.setErrorMsg(msg)\n        }\n      })\n    }\n  }\n\n  _validateSQSqueue (dataDict) {\n    let restURI = `splunk_ta_aws/splunk_ta_aws_sqs_queue_attributes?aws_account=${dataDict.aws_account}&aws_region=${dataDict.sqs_queue_region}&sqs_queue_url=${dataDict.sqs_queue_url}&private_endpoint_enabled=${dataDict.private_endpoint_enabled}&sts_private_endpoint_url=${dataDict.sts_private_endpoint_url}&sqs_private_endpoint_url=${dataDict.sqs_private_endpoint_url}&output_mode=json`\n    const iamRole = dataDict.aws_iam_role\n\n    if (iamRole) {\n      restURI += `&aws_iam_role=${iamRole}`\n    }\n\n    const url = createRESTURL(restURI, {\n      app: APP_NAME,\n      sharing: 'app'\n    })\n\n    const usingDLQ = dataDict.using_dlq\n    try {\n      const client = new XMLHttpRequest() /* global XMLHttpRequest:false */\n      client.open('GET', url, false)\n      client.setRequestHeader('X-Splunk-Form-Key', CSRFToken)\n      client.setRequestHeader('X-Requested-With', 'XMLHttpRequest')\n      client.setRequestHeader('Content-Type', 'application/json')\n      client.send()\n      if (client.status === 200) {\n        const data = JSON.parse(client.responseText)\n        const queueAttributes = data.entry[0].content\n        const visibilityTimeout = queueAttributes.VisibilityTimeout\n        const redrivePolicy = queueAttributes.RedrivePolicy\n\n        // check redrivePolicy & visibilityTimeout if it is DLQ (only if using_dlq is checked)\n        if (usingDLQ !== 0 && !redrivePolicy) {\n          this.util.setErrorFieldMsg('sqs_queue_url', DLQ_REQUIRED_ERROR)\n          return false\n        } else if (usingDLQ !== 0 && visibilityTimeout < 300) {\n          this.util.setErrorFieldMsg('sqs_queue_url', VISIBILITY_TIMEOUT_WARNING)\n          return false\n        }\n      } else {\n        this.util.setErrorFieldMsg('sqs_queue_url', QUEUE_NOT_FOUND_ERROR)\n        return false\n      }\n    } catch (err) {\n      this.util.setErrorFieldMsg('sqs_queue_url', `validation of selected SQS queue failed. ERROR : ${err}`)\n      return false\n    }\n    return true\n  }\n\n  _nameChange (dataDict) {}\n\n  _getInputService () {\n    this.urlParams = this._extractQuery()\n    let { input, service } = this.urlParams\n\n    if (!input || this.mode === 'edit' || this.mode === 'clone') {\n      const data = this._getNormalizeData()\n      input = detectSource(data, this.serviceName)\n    }\n\n    return {\n      input,\n      service\n    }\n  }\n\n  _removeExtraParamsFromURL () {\n    const url = window.location.toString()\n    const val = url.split('?')\n    if (val.length === 2) {\n      setTimeout(() => window.history.pushState({}, '', val[0]))\n    }\n  }\n\n  _extractQuery () {\n    // ADDON-17149. On IE, the URL location is different, so we need to use hash.\n    const search = document.location.search || document.location.hash\n    if (!search || search.length === 0) {\n      return\n    }\n\n    const pos = search.indexOf('?') + 1 || 0\n    const paramsArr = search.substring(pos).split('&')\n    const params = {}\n    paramsArr.forEach((param) => {\n      const kv = param.split('=')\n      if (kv.length === 1) {\n        params[kv[0]] = null\n      } else {\n        params[kv[0]] = kv[1]\n      }\n    })\n\n    return params\n  }\n\n  _setValue (key, value) {\n    this.util.setState((prevState) => {\n      const data = { ...prevState.data }\n      data[key].value = value\n      return { data }\n    })\n  }\n\n  _hideField (keys, inverse) {\n    if (!isArray(keys)) {\n      keys = [keys]\n    }\n    for (const key of keys) {\n      this.util.setState((prevState) => {\n        const data = { ...prevState.data }\n        if (inverse) {\n          data[key].display = true\n        } else {\n          data[key].display = false\n        }\n        return { data }\n      })\n    }\n  }\n\n  _disabledField (keys) {\n    if (!isArray(keys)) {\n      keys = [keys]\n    }\n    for (const key of keys) {\n      this.util.setState((prevState) => {\n        const data = { ...prevState.data }\n        data[key].disabled = true\n        return { data }\n      })\n    }\n  }\n\n  _fetchConflictFields (service) {\n    const dfd = Deferred()\n    const contextURL = createRESTURL('splunk_ta_aws_' + service, {\n      app: APP_NAME,\n      sharing: 'app'\n    })\n    fetch(contextURL + '?output_mode=json')/* global fetch:false */\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.entry !== []) {\n          for (let i = 0; i < data.entry.length; i++) {\n            if (\n              data.entry[i].name === this.state.data.name.value &&\n                            '_conflict_fields' in data.entry[i].content\n            ) {\n              this._conflict_fields = JSON.parse(data.entry[i].content._conflict_fields)\n            }\n          }\n        }\n        dfd.resolve()\n      })\n    return dfd\n  }\n\n  _getNormalizeData () {\n    const data = {}\n    const dataKeys = Object.keys(this.state.data)\n    dataKeys.forEach((key) => {\n      data[key] = this.state.data[key].value\n    })\n    return data\n  }\n}\n\nexport default Hook\n"],"names":["aws_description","aws_config","aws_config_rule","aws_cloudwatch","aws_cloudwatch_logs","aws_s3","splunk_ta_aws_logs","aws_sqs_based_s3","aws_billing","aws_billing_cur","aws_cloudtrail","aws_kinesis","aws_inspector","splunk_ta_aws_sqs","SQS_BASED_S3","input","link","getServiceLocationMap","encodeURIComponent","buildInputLink","getAllLinks","FormDataContext","createContext","regions","setRegions","queues","setQueues","effectiveState","setEffectiveState","FormDataContextProvider","hookProps","children","initFormRows","setFormState","serviceName","initAccount","useState","account","setAccount","effectiveFormRows","setEffectiveFormRows","rules","setRules","React","Provider","value","propTypes","PropTypes","oneOfType","arrayOf","node","isRequired","useFormData","useContext","valueStyle","flex","borderColor","ERROR_REGEX","QueueInput","initValue","effectiveRegion","index","handleFormStateUpdate","setValue","options","setOptions","loading","setLoading","oldAwsRegion","setOldAwsRegion","resetValues","updateForm","useEffect","_queues$account","map","x","Select","Option","label","_queues$account2","url","URL","createRESTURL","location","params","aws_account","aws_region","output_mode","count","headers","CSRFToken","search","URLSearchParams","toString","fetch","method","then","response","ok","json","Promise","reject","content","entries","entry","newQueues","name","error","message","text","responseText","matches","match","length","prevState","newState","errorMsg","onChange","e","disabled","placeholder","style","filter","inline","memo","RulesInput","values","setValues","_rules$account","Multiselect","_rules$account2","newRules","MultiQueueInput","keyStyle","display","alignItems","RegionInput","handleChangeRegion","handleFormStateDelete","aws_service","newRegions","width","minWidth","spanStyle","lineHeight","justifyContent","SingleInputWrapper","region","setEffectiveRegion","secondInput","CustomFormRows","items","setItems","window","Object","forEach","v","push","join","data","JSON","stringify","rule_names","sqs_queues","sqs_queue","oldFormRows","newFormRows","handleRequestRemove","oldItems","FormRows","removeRow","idx","k","Row","key","onRequestRemove","Date","now","Math","random","substr","title","header","id","addLabel","onRequestAdd","addRow","createDOMID","FormRowsWrapper","SplunkThemeProvider","ThemeProviderSettings","MAX_TIME","moment","SERVICES_WITH_CONFLICT_FIELDS","SERVICES_WITH_GROUP_SELECTION","SQS_BASED_S3_SOURCETYPES","CloudTrail","Config","S3AccessLogs","CloudFrontAccessLogs","ELBAccessLogs","CustomLogs","SPLUNK_TA_AWS_LOGS_SOURCETYPES","cloudtrail","Hook","globalConfig","state","mode","util","_debouncedNameChange","this","debounce","_nameChange","bind","context","getComponent","cancelButton","$","on","_this","_removeExtraParamsFromURL","func","wait","timeout","args","clearTimeout","setTimeout","field","dataDict","sourceType","_setValue","logNameFormat","_getInputService","service","val","split","history","pushState","html","append","selector","callback","checkFrequencyInMs","timeoutInMs","startTimeInMs","item","getMapData","find","models","omit","keys","_this2","includes","awsRegions","parse","ruleNames","sqsQueues","ReactDOM","render","setState","document","getElementById","loopSearch","querySelector","initial_scan_datetime","defaultValue","utc","subtract","startOf","format","start_date","sourcetype","s3_file_decoder","_hideField","_disabledField","log_type","distributionID","log_name_format","indexOf","substring","setErrorFieldMsg","times","polling_interval","period","floor","setErrorMsg","termnalTime","terminal_scan_datetime","clearAllErrorMsg","err","sqs_queue_region","sqs_queue_url","_validateSQSqueue","distributionId","_fetchConflictFields","done","_this3","_conflict_fields","entity","msg","globalConfigField","el","restURI","private_endpoint_enabled","sts_private_endpoint_url","sqs_private_endpoint_url","iamRole","aws_iam_role","app","sharing","usingDLQ","using_dlq","client","XMLHttpRequest","open","setRequestHeader","send","status","queueAttributes","visibilityTimeout","VisibilityTimeout","redrivePolicy","RedrivePolicy","urlParams","_extractQuery","_getNormalizeData","detectSource","hash","pos","paramsArr","param","kv","inverse","isArray","_this4","_this5","dfd","Deferred","contextURL","i","_this6","resolve","_this7"],"mappings":"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"}